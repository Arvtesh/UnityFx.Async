<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnityFx.Async-netstandard2.0</name>
    </assembly>
    <members>
        <member name="T:UnityFx.Async.AsyncCallbackOptions">
            <summary>
            Specifies callback options.
            </summary>
            <seealso cref="T:UnityFx.Async.AsyncContinuationOptions"/>
        </member>
        <member name="F:UnityFx.Async.AsyncCallbackOptions.None">
            <summary>
            When no options specified, default behavior should be used when executing callbacks.
            I.e. a callback is executed on the same thread that scheduled it.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncCallbackOptions.ExecuteSynchronously">
            <summary>
            Specifies that the callback should be executed synchronously. With this option specified, the callback runs on
            the same thread that causes the antecedent operation to transition into its final state.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncCallbackOptions.ExecuteOnDefaultContext">
            <summary>
            Specifies that the callback should be executed on the default thread. Please see
            <see cref="P:UnityFx.Async.AsyncResult.DefaultSynchronizationContext"/> for more information.
            </summary>
        </member>
        <member name="T:UnityFx.Async.AsyncCompletionSource">
            <summary>
            Represents an asynchronous operation with external completion control.
            </summary>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:UnityFx.Async.AsyncCompletionSource`1"/>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource"/> class.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource"/> class.
            </summary>
            <param name="asyncState">User-defined data returned by <see cref="P:System.IAsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource"/> class.
            </summary>
            <param name="asyncCallback">User-defined completion callback.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:System.IAsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.#ctor(UnityFx.Async.AsyncCreationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource"/> class.
            </summary>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.#ctor(UnityFx.Async.AsyncCreationOptions,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource"/> class.
            </summary>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:System.IAsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.#ctor(UnityFx.Async.AsyncCreationOptions,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource"/> class.
            </summary>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
            <param name="asyncCallback">User-defined completion callback.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:System.IAsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.#ctor(UnityFx.Async.AsyncOperationStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource"/> class.
            </summary>
            <param name="status">Initial value of the <see cref="P:UnityFx.Async.AsyncResult.Status"/> property.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.#ctor(UnityFx.Async.AsyncOperationStatus,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource"/> class.
            </summary>
            <param name="status">Initial value of the <see cref="P:UnityFx.Async.AsyncResult.Status"/> property.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:System.IAsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.#ctor(UnityFx.Async.AsyncOperationStatus,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource"/> class.
            </summary>
            <param name="status">Initial value of the <see cref="P:UnityFx.Async.AsyncResult.Status"/> property.</param>
            <param name="asyncCallback">User-defined completion callback.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:System.IAsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.#ctor(UnityFx.Async.AsyncOperationStatus,UnityFx.Async.AsyncCreationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource"/> class.
            </summary>
            <param name="status">Initial value of the <see cref="P:UnityFx.Async.AsyncResult.Status"/> property.</param>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.#ctor(UnityFx.Async.AsyncOperationStatus,UnityFx.Async.AsyncCreationOptions,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource"/> class.
            </summary>
            <param name="status">Initial value of the <see cref="P:UnityFx.Async.AsyncResult.Status"/> property.</param>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:System.IAsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.#ctor(UnityFx.Async.AsyncOperationStatus,UnityFx.Async.AsyncCreationOptions,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource"/> class.
            </summary>
            <param name="status">Initial value of the <see cref="P:UnityFx.Async.AsyncResult.Status"/> property.</param>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
            <param name="asyncCallback">User-defined completion callback.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:System.IAsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.SetScheduled">
            <summary>
            Transitions the operation to <see cref="F:UnityFx.Async.AsyncOperationStatus.Scheduled"/> state.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncCompletionSource.TrySetScheduled"/>
            <seealso cref="M:UnityFx.Async.AsyncCompletionSource.SetRunning"/>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.TrySetScheduled">
            <summary>
            Attempts to transition the operation into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Scheduled"/> state.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.AsyncCompletionSource.SetScheduled"/>
            <seealso cref="M:UnityFx.Async.AsyncCompletionSource.TrySetRunning"/>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.SetRunning">
            <summary>
            Transitions the operation to <see cref="F:UnityFx.Async.AsyncOperationStatus.Running"/> state.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncCompletionSource.TrySetRunning"/>
            <seealso cref="M:UnityFx.Async.AsyncCompletionSource.SetScheduled"/>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.TrySetRunning">
            <summary>
            Attempts to transition the operation into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Running"/> state.
            </summary>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncCompletionSource.SetRunning"/>
            <seealso cref="M:UnityFx.Async.AsyncCompletionSource.TrySetScheduled"/>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.GetProgress">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.OnCancel">
            <inheritdoc/>
        </member>
        <member name="P:UnityFx.Async.AsyncCompletionSource.Operation">
            <summary>
            Gets the operation being controller by the source.
            </summary>
            <value>The underlying operation instance.</value>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.TrySetProgress(System.Single)">
            <summary>
            Attempts to set the operation progress value in range [0, 1].
            </summary>
            <param name="progress">The operation progress in range [0, 1].</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="progress"/> is not in range [0, 1].</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.TrySetCanceled">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Canceled"/> state.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.TrySetCompleted">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> state.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource.TrySetException(System.Exception)">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> state.
            </summary>
            <param name="exception">An exception that caused the operation to end prematurely.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="exception"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:UnityFx.Async.AsyncCompletionSource`1">
            <summary>
            Represents an asynchronous operation with external completion control. <see cref="T:UnityFx.Async.IAsyncCompletionSource`1"/>.
            </summary>
            <typeparam name="TResult">Type of the operation result value.</typeparam>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:UnityFx.Async.AsyncCompletionSource"/>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource`1"/> class.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource`1"/> class.
            </summary>
            <param name="asyncState">User-defined data returned by <see cref="P:System.IAsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource`1"/> class.
            </summary>
            <param name="asyncCallback">User-defined completion callback.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:System.IAsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.#ctor(UnityFx.Async.AsyncCreationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource`1"/> class.
            </summary>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.#ctor(UnityFx.Async.AsyncCreationOptions,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource`1"/> class.
            </summary>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:System.IAsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.#ctor(UnityFx.Async.AsyncCreationOptions,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource`1"/> class.
            </summary>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
            <param name="asyncCallback">User-defined completion callback.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:System.IAsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.#ctor(UnityFx.Async.AsyncOperationStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource`1"/> class.
            </summary>
            <param name="status">Initial value of the <see cref="P:UnityFx.Async.AsyncResult.Status"/> property.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.#ctor(UnityFx.Async.AsyncOperationStatus,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource`1"/> class.
            </summary>
            <param name="status">Initial value of the <see cref="P:UnityFx.Async.AsyncResult.Status"/> property.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:System.IAsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.#ctor(UnityFx.Async.AsyncOperationStatus,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource`1"/> class.
            </summary>
            <param name="status">Initial value of the <see cref="P:UnityFx.Async.AsyncResult.Status"/> property.</param>
            <param name="asyncCallback">User-defined completion callback.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:System.IAsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.#ctor(UnityFx.Async.AsyncOperationStatus,UnityFx.Async.AsyncCreationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource`1"/> class.
            </summary>
            <param name="status">Initial value of the <see cref="P:UnityFx.Async.AsyncResult.Status"/> property.</param>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.#ctor(UnityFx.Async.AsyncOperationStatus,UnityFx.Async.AsyncCreationOptions,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource`1"/> class.
            </summary>
            <param name="status">Initial value of the <see cref="P:UnityFx.Async.AsyncResult.Status"/> property.</param>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:System.IAsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.#ctor(UnityFx.Async.AsyncOperationStatus,UnityFx.Async.AsyncCreationOptions,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncCompletionSource`1"/> class.
            </summary>
            <param name="status">Initial value of the <see cref="P:UnityFx.Async.AsyncResult.Status"/> property.</param>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
            <param name="asyncCallback">User-defined completion callback.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:System.IAsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.SetScheduled">
            <summary>
            Transitions the operation to <see cref="F:UnityFx.Async.AsyncOperationStatus.Scheduled"/> state.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncCompletionSource`1.TrySetScheduled"/>
            <seealso cref="M:UnityFx.Async.AsyncCompletionSource`1.SetRunning"/>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.TrySetScheduled">
            <summary>
            Attempts to transition the underlying operation into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Scheduled"/> state.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown is the underlying operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.AsyncCompletionSource`1.SetScheduled"/>
            <seealso cref="M:UnityFx.Async.AsyncCompletionSource`1.TrySetRunning"/>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.SetRunning">
            <summary>
            Transitions the operation to <see cref="F:UnityFx.Async.AsyncOperationStatus.Running"/> state.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncCompletionSource`1.TrySetRunning"/>
            <seealso cref="M:UnityFx.Async.AsyncCompletionSource`1.SetScheduled"/>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.TrySetRunning">
            <summary>
            Attempts to transition the underlying operation into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Running"/> state.
            </summary>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown is the underlying operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncCompletionSource`1.SetRunning"/>
            <seealso cref="M:UnityFx.Async.AsyncCompletionSource`1.TrySetScheduled"/>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.GetProgress">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.OnCancel">
            <inheritdoc/>
        </member>
        <member name="P:UnityFx.Async.AsyncCompletionSource`1.Operation">
            <summary>
            Gets the operation being controller by the source.
            </summary>
            <value>The underlying operation instance.</value>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.TrySetProgress(System.Single)">
            <summary>
            Attempts to set the operation progress value in range [0, 1].
            </summary>
            <param name="progress">The operation progress in range [0, 1].</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="progress"/> is not in range [0, 1].</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.TrySetCanceled">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation`1"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Canceled"/> state.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.TrySetException(System.Exception)">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation`1"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> state.
            </summary>
            <param name="exception">An exception that caused the operation to end prematurely.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="exception"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncCompletionSource`1.TrySetResult(`0)">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation`1"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> state.
            </summary>
            <param name="result">The operation result.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:UnityFx.Async.AsyncContinuationOptions">
            <summary>
            Specifies the behavior of an asynchronous operation continuation.
            </summary>
            <seealso cref="T:UnityFx.Async.AsyncCallbackOptions"/>
        </member>
        <member name="F:UnityFx.Async.AsyncContinuationOptions.None">
            <summary>
            When no continuation options are specified, default behavior should be used when executing a continuation.
            I.e. continuation is executed on the same thread that scheduled it.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncContinuationOptions.NotOnRanToCompletion">
            <summary>
            Specifies that the continuation should not be scheduled if its antecedent ran to completion.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncContinuationOptions.NotOnFaulted">
            <summary>
            Specifies that the continuation should not be scheduled if its antecedent threw an unhandled exception.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncContinuationOptions.NotOnCanceled">
            <summary>
            Specifies that the continuation should not be scheduled if its antecedent was canceled.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncContinuationOptions.OnlyOnRanToCompletion">
            <summary>
            Specifies that the continuation should be scheduled only if its antecedent ran to completion.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncContinuationOptions.OnlyOnFaulted">
            <summary>
            Specifies that the continuation should be scheduled only if its antecedent threw an unhandled exception.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncContinuationOptions.OnlyOnCanceled">
            <summary>
            Specifies that the continuation should be scheduled only if its antecedent was canceled.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncContinuationOptions.ExecuteSynchronously">
            <summary>
            Specifies that the continuation should be executed synchronously. With this option specified, the continuation runs on
            the same thread that causes the antecedent operation to transition into its final state.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncContinuationOptions.ExecuteOnDefaultContext">
            <summary>
            Specifies that the continuation should be executed on the default thread. Please see
            <see cref="P:UnityFx.Async.AsyncResult.DefaultSynchronizationContext"/> for more information.
            </summary>
        </member>
        <member name="T:UnityFx.Async.AsyncCreationOptions">
            <summary>
            Specifies flags that control optional behavior for the creation and execution of operations.
            </summary>
            <seealso cref="T:UnityFx.Async.AsyncResult"/>
        </member>
        <member name="F:UnityFx.Async.AsyncCreationOptions.None">
            <summary>
            Specifies that the default behavior should be used.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncCreationOptions.RunContinuationsAsynchronously">
            <summary>
            Forces continuations added to the current operation to be executed asynchronously.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncCreationOptions.SuppressCancellation">
            <summary>
            If set cancelling the operation has no effect (silently ignored).
            </summary>
        </member>
        <member name="T:UnityFx.Async.AsyncExtensions">
            <summary>
            Extension methods for <see cref="T:UnityFx.Async.IAsyncOperation"/> and related classes.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ThrowIfNonSuccess(UnityFx.Async.IAsyncOperation)">
            <summary>
            Throws if the specified operation is faulted/canceled.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.WithCancellation(UnityFx.Async.IAsyncOperation,System.Threading.CancellationToken)">
            <summary>
            Registers a <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the specified operation.
            </summary>
            <param name="op">An operation to register <paramref name="cancellationToken"/> for.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <exception cref="T:System.NotSupportedException">Thrown if the target operation does not support cancellation.</exception>
            <returns>Returns the target operation.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Wait(UnityFx.Async.IAsyncOperation)">
            <summary>
            Waits for the <see cref="T:UnityFx.Async.IAsyncOperation"/> to complete execution. After that rethrows the operation exception (if any).
            </summary>
            <param name="op">The operation to wait for.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Wait(UnityFx.Async.IAsyncOperation,System.Int32)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Wait(UnityFx.Async.IAsyncOperation,System.TimeSpan)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Wait(UnityFx.Async.IAsyncOperation,System.Int32)">
            <summary>
            Waits for the <see cref="T:UnityFx.Async.IAsyncOperation"/> to complete execution within a specified number of milliseconds. After that rethrows the operation exception (if any).
            </summary>
            <param name="op">The operation to wait for.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <returns><see langword="true"/> if the operation completed execution within the allotted time; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a negative number other than -1.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Wait(UnityFx.Async.IAsyncOperation)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Wait(UnityFx.Async.IAsyncOperation,System.TimeSpan)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Wait(UnityFx.Async.IAsyncOperation,System.TimeSpan)">
            <summary>
            Waits for the <see cref="T:UnityFx.Async.IAsyncOperation"/> to complete execution within a specified time interval. After that rethrows the operation exception (if any).
            </summary>
            <param name="op">The operation to wait for.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.</param>
            <returns><see langword="true"/> if the operation completed execution within the allotted time; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative number other than -1 milliseconds, or <paramref name="timeout"/> is greater than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Wait(UnityFx.Async.IAsyncOperation)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Wait(UnityFx.Async.IAsyncOperation,System.Int32)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Wait(UnityFx.Async.IAsyncOperation,System.Threading.CancellationToken)">
            <summary>
            Waits for the <see cref="T:UnityFx.Async.IAsyncOperation"/> to complete execution. After that rethrows the operation exception (if any).
            The wait terminates if a cancellation token is canceled before the operation completes.
            </summary>
            <param name="op">The operation to wait for.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the operation to complete.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Wait(UnityFx.Async.IAsyncOperation)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Wait(UnityFx.Async.IAsyncOperation,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for the <see cref="T:UnityFx.Async.IAsyncOperation"/> to complete execution within a specified number of milliseconds. After that
            rethrows the operation exception (if any). The wait terminates if a timeout interval elapses or a cancellation token is
            canceled before the operation completes.
            </summary>
            <param name="op">The operation to wait for.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the operation to complete.</param>
            <returns><see langword="true"/> if the operation completed execution within the allotted time; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a negative number other than -1.</exception>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Wait(UnityFx.Async.IAsyncOperation,System.Int32)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Wait(UnityFx.Async.IAsyncOperation,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Waits for the <see cref="T:UnityFx.Async.IAsyncOperation"/> to complete execution within a specified time interval. After that rethrows
            the operation exception (if any). The wait terminates if a timeout interval elapses or a cancellation token is canceled
            before the operation completes.
            </summary>
            <param name="op">The operation to wait for.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the operation to complete.</param>
            <returns><see langword="true"/> if the operation completed execution within the allotted time; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative number other than -1 milliseconds, or <paramref name="timeout"/> is greater than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Wait(UnityFx.Async.IAsyncOperation,System.TimeSpan)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation)">
            <summary>
            Waits for the <see cref="T:UnityFx.Async.IAsyncOperation"/> to complete execution. After that rethrows the operation exception (if any).
            </summary>
            <param name="op">The operation to join.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation,System.Int32)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation,System.TimeSpan)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation,System.Int32)">
            <summary>
            Waits for the <see cref="T:UnityFx.Async.IAsyncOperation"/> to complete execution within a specified number of milliseconds. After that rethrows the operation exception (if any).
            </summary>
            <param name="op">The operation to wait for.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a negative number other than -1.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the operation did not completed within <paramref name="millisecondsTimeout"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation,System.TimeSpan)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0},System.Int32)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation,System.TimeSpan)">
            <summary>
            Waits for the <see cref="T:UnityFx.Async.IAsyncOperation"/> to complete execution within a specified timeout. After that rethrows the operation exception (if any).
            </summary>
            <param name="op">The operation to wait for.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative number other than -1 milliseconds, or <paramref name="timeout"/> is greater than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the operation did not completed within <paramref name="timeout"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation,System.Int32)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0},System.TimeSpan)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0})">
            <summary>
            Waits for the <see cref="T:UnityFx.Async.IAsyncOperation`1"/> to complete execution. After that rethrows the operation exception (if any).
            </summary>
            <param name="op">The operation to join.</param>
            <returns>The operation result.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0},System.Int32)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0},System.TimeSpan)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0},System.Int32)">
            <summary>
            Waits for the <see cref="T:UnityFx.Async.IAsyncOperation`1"/> to complete execution within a specified number of milliseconds. After that rethrows the operation exception (if any).
            </summary>
            <param name="op">The operation to wait for.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <returns>The operation result.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a negative number other than -1.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the operation did not completed within <paramref name="millisecondsTimeout"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0})"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0},System.TimeSpan)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation,System.Int32)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0},System.TimeSpan)">
            <summary>
            Waits for the <see cref="T:UnityFx.Async.IAsyncOperation`1"/> to complete execution within a specified timeout. After that rethrows the operation exception (if any).
            </summary>
            <param name="op">The operation to wait for.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.</param>
            <returns>The operation result.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative number other than -1 milliseconds, or <paramref name="timeout"/> is greater than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the operation did not completed within <paramref name="timeout"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0})"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0},System.Int32)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation,System.TimeSpan)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation,System.Threading.CancellationToken)">
            <summary>
            Waits for the <see cref="T:UnityFx.Async.IAsyncOperation"/> to complete execution. After that rethrows the operation exception (if any). The wait terminates
            if a cancellation token is canceled before the operation completes.
            </summary>
            <param name="op">The operation to join.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the operation to complete.</param>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for the <see cref="T:UnityFx.Async.IAsyncOperation"/> to complete execution within a specified number of milliseconds. After that rethrows the operation exception (if any).
            The wait terminates if a timeout interval elapses or a cancellation token is canceled before the operation completes.
            </summary>
            <param name="op">The operation to wait for.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the operation to complete.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a negative number other than -1.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the operation did not completed within <paramref name="millisecondsTimeout"/>.</exception>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation,System.Int32)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Waits for the <see cref="T:UnityFx.Async.IAsyncOperation"/> to complete execution within a specified timeout. After that rethrows the operation exception (if any).
            The wait terminates if a timeout interval elapses or a cancellation token is canceled before the operation completes.
            </summary>
            <param name="op">The operation to wait for.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the operation to complete.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative number other than -1 milliseconds, or <paramref name="timeout"/> is greater than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the operation did not completed within <paramref name="timeout"/>.</exception>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation,System.TimeSpan)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0},System.Threading.CancellationToken)">
            <summary>
            Waits for the <see cref="T:UnityFx.Async.IAsyncOperation`1"/> to complete execution. After that rethrows the operation exception (if any).
            The wait terminates if a cancellation token is canceled before the operation completes.
            </summary>
            <param name="op">The operation to join.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the operation to complete.</param>
            <returns>The operation result.</returns>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for the <see cref="T:UnityFx.Async.IAsyncOperation`1"/> to complete execution within a specified number of milliseconds. After that rethrows the operation exception (if any).
            The wait terminates if a timeout interval elapses or a cancellation token is canceled before the operation completes.
            </summary>
            <param name="op">The operation to wait for.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the operation to complete.</param>
            <returns>The operation result.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a negative number other than -1.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the operation did not completed within <paramref name="millisecondsTimeout"/>.</exception>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0},System.Int32)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Waits for the <see cref="T:UnityFx.Async.IAsyncOperation`1"/> to complete execution within a specified timeout. After that rethrows the operation exception (if any).
            The wait terminates if a timeout interval elapses or a cancellation token is canceled before the operation completes.
            </summary>
            <param name="op">The operation to wait for.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the operation to complete.</param>
            <returns>The operation result.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative number other than -1 milliseconds, or <paramref name="timeout"/> is greater than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the operation did not completed within <paramref name="timeout"/>.</exception>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0},System.TimeSpan)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ContinueWith(UnityFx.Async.IAsyncOperation,System.Action{UnityFx.Async.IAsyncOperation})">
            <summary>
            Creates a continuation that executes when the target <see cref="T:UnityFx.Async.IAsyncOperation"/> completes.
            </summary>
            <param name="op">The operation to continue.</param>
            <param name="action">An action to run when the <paramref name="op"/> completes.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An operation that is executed after <paramref name="op"/> completes.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith(UnityFx.Async.IAsyncOperation,System.Action{UnityFx.Async.IAsyncOperation},UnityFx.Async.AsyncContinuationOptions)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ContinueWith(UnityFx.Async.IAsyncOperation,System.Action{UnityFx.Async.IAsyncOperation},UnityFx.Async.AsyncContinuationOptions)">
            <summary>
            Creates a continuation that executes when the target <see cref="T:UnityFx.Async.IAsyncOperation"/> completes.
            </summary>
            <param name="op">The operation to continue.</param>
            <param name="action">An action to run when the <paramref name="op"/> completes.</param>
            <param name="options">Options for when the <paramref name="action"/> is executed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An operation that is executed after <paramref name="op"/> completes.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith(UnityFx.Async.IAsyncOperation,System.Action{UnityFx.Async.IAsyncOperation})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ContinueWith(UnityFx.Async.IAsyncOperation,System.Action{UnityFx.Async.IAsyncOperation,System.Object},System.Object)">
            <summary>
            Creates a continuation that executes when the target <see cref="T:UnityFx.Async.IAsyncOperation"/> completes.
            </summary>
            <param name="op">The operation to continue.</param>
            <param name="action">An action to run when the <paramref name="op"/> completes.</param>
            <param name="userState">A user-defined state object that is passed as second argument to <paramref name="action"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An operation that is executed after <paramref name="op"/> completes.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith(UnityFx.Async.IAsyncOperation,System.Action{UnityFx.Async.IAsyncOperation,System.Object},System.Object,UnityFx.Async.AsyncContinuationOptions)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ContinueWith(UnityFx.Async.IAsyncOperation,System.Action{UnityFx.Async.IAsyncOperation,System.Object},System.Object,UnityFx.Async.AsyncContinuationOptions)">
            <summary>
            Creates a continuation that executes when the target <see cref="T:UnityFx.Async.IAsyncOperation"/> completes.
            </summary>
            <param name="op">The operation to continue.</param>
            <param name="action">An action to run when the <paramref name="op"/> completes.</param>
            <param name="userState">A user-defined state object that is passed as second argument to <paramref name="action"/>.</param>
            <param name="options">Options for when the <paramref name="action"/> is executed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An operation that is executed after <paramref name="op"/> completes.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith(UnityFx.Async.IAsyncOperation,System.Action{UnityFx.Async.IAsyncOperation,System.Object},System.Object)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(UnityFx.Async.IAsyncOperation,System.Func{UnityFx.Async.IAsyncOperation,``0})">
            <summary>
            Creates a continuation that executes when the target <see cref="T:UnityFx.Async.IAsyncOperation"/> completes.
            </summary>
            <param name="op">The operation to continue.</param>
            <param name="action">An action to run when the <paramref name="op"/> completes.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An operation that is executed after <paramref name="op"/> completes.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(UnityFx.Async.IAsyncOperation,System.Func{UnityFx.Async.IAsyncOperation,``0},UnityFx.Async.AsyncContinuationOptions)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(UnityFx.Async.IAsyncOperation,System.Func{UnityFx.Async.IAsyncOperation,``0},UnityFx.Async.AsyncContinuationOptions)">
            <summary>
            Creates a continuation that executes when the target <see cref="T:UnityFx.Async.IAsyncOperation"/> completes.
            </summary>
            <param name="op">The operation to continue.</param>
            <param name="action">An action to run when the <paramref name="op"/> completes.</param>
            <param name="options">Options for when the <paramref name="action"/> is executed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An operation that is executed after <paramref name="op"/> completes.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(UnityFx.Async.IAsyncOperation,System.Func{UnityFx.Async.IAsyncOperation,``0})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(UnityFx.Async.IAsyncOperation,System.Func{UnityFx.Async.IAsyncOperation,System.Object,``0},System.Object)">
            <summary>
            Creates a continuation that executes when the target <see cref="T:UnityFx.Async.IAsyncOperation"/> completes.
            </summary>
            <param name="op">The operation to continue.</param>
            <param name="action">An action to run when the <paramref name="op"/> completes.</param>
            <param name="userState">A user-defined state object that is passed as second argument to <paramref name="action"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An operation that is executed after <paramref name="op"/> completes.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(UnityFx.Async.IAsyncOperation,System.Func{UnityFx.Async.IAsyncOperation,System.Object,``0},System.Object,UnityFx.Async.AsyncContinuationOptions)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(UnityFx.Async.IAsyncOperation,System.Func{UnityFx.Async.IAsyncOperation,System.Object,``0},System.Object,UnityFx.Async.AsyncContinuationOptions)">
            <summary>
            Creates a continuation that executes when the target <see cref="T:UnityFx.Async.IAsyncOperation"/> completes.
            </summary>
            <param name="op">The operation to continue.</param>
            <param name="action">An action to run when the <paramref name="op"/> completes.</param>
            <param name="userState">A user-defined state object that is passed as second argument to <paramref name="action"/>.</param>
            <param name="options">Options for when the <paramref name="action"/> is executed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An operation that is executed after <paramref name="op"/> completes.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(UnityFx.Async.IAsyncOperation,System.Func{UnityFx.Async.IAsyncOperation,System.Object,``0},System.Object)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(UnityFx.Async.IAsyncOperation{``0},System.Action{UnityFx.Async.IAsyncOperation{``0}})">
            <summary>
            Creates a continuation that executes when the target <see cref="T:UnityFx.Async.IAsyncOperation`1"/> completes.
            </summary>
            <param name="op">The operation to continue.</param>
            <param name="action">An action to run when the <paramref name="op"/> completes.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An operation that is executed after <paramref name="op"/> completes.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(UnityFx.Async.IAsyncOperation{``0},System.Action{UnityFx.Async.IAsyncOperation{``0}},UnityFx.Async.AsyncContinuationOptions)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(UnityFx.Async.IAsyncOperation{``0},System.Action{UnityFx.Async.IAsyncOperation{``0}},UnityFx.Async.AsyncContinuationOptions)">
            <summary>
            Creates a continuation that executes when the target <see cref="T:UnityFx.Async.IAsyncOperation`1"/> completes.
            </summary>
            <param name="op">The operation to continue.</param>
            <param name="action">An action to run when the <paramref name="op"/> completes.</param>
            <param name="options">Options for when the <paramref name="action"/> is executed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An operation that is executed after <paramref name="op"/> completes.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(UnityFx.Async.IAsyncOperation{``0},System.Action{UnityFx.Async.IAsyncOperation{``0}})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(UnityFx.Async.IAsyncOperation{``0},System.Action{UnityFx.Async.IAsyncOperation{``0},System.Object},System.Object)">
            <summary>
            Creates a continuation that executes when the target <see cref="T:UnityFx.Async.IAsyncOperation`1"/> completes.
            </summary>
            <param name="op">The operation to continue.</param>
            <param name="action">An action to run when the <paramref name="op"/> completes.</param>
            <param name="userState">A user-defined state object that is passed as second argument to <paramref name="action"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An operation that is executed after <paramref name="op"/> completes.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(UnityFx.Async.IAsyncOperation{``0},System.Action{UnityFx.Async.IAsyncOperation{``0},System.Object},System.Object,UnityFx.Async.AsyncContinuationOptions)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(UnityFx.Async.IAsyncOperation{``0},System.Action{UnityFx.Async.IAsyncOperation{``0},System.Object},System.Object,UnityFx.Async.AsyncContinuationOptions)">
            <summary>
            Creates a continuation that executes when the target <see cref="T:UnityFx.Async.IAsyncOperation`1"/> completes.
            </summary>
            <param name="op">The operation to continue.</param>
            <param name="action">An action to run when the <paramref name="op"/> completes.</param>
            <param name="userState">A user-defined state object that is passed as second argument to <paramref name="action"/>.</param>
            <param name="options">Options for when the <paramref name="action"/> is executed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An operation that is executed after <paramref name="op"/> completes.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(UnityFx.Async.IAsyncOperation{``0},System.Action{UnityFx.Async.IAsyncOperation{``0},System.Object},System.Object)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ContinueWith``2(UnityFx.Async.IAsyncOperation{``0},System.Func{UnityFx.Async.IAsyncOperation{``0},``1})">
            <summary>
            Creates a continuation that executes when the target <see cref="T:UnityFx.Async.IAsyncOperation"/> completes.
            </summary>
            <param name="op">The operation to continue.</param>
            <param name="action">An action to run when the <paramref name="op"/> completes.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An operation that is executed after <paramref name="op"/> completes.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``2(UnityFx.Async.IAsyncOperation{``0},System.Func{UnityFx.Async.IAsyncOperation{``0},``1},UnityFx.Async.AsyncContinuationOptions)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ContinueWith``2(UnityFx.Async.IAsyncOperation{``0},System.Func{UnityFx.Async.IAsyncOperation{``0},``1},UnityFx.Async.AsyncContinuationOptions)">
            <summary>
            Creates a continuation that executes when the target <see cref="T:UnityFx.Async.IAsyncOperation"/> completes.
            </summary>
            <param name="op">The operation to continue.</param>
            <param name="action">An action to run when the <paramref name="op"/> completes.</param>
            <param name="options">Options for when the <paramref name="action"/> is executed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An operation that is executed after <paramref name="op"/> completes.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``2(UnityFx.Async.IAsyncOperation{``0},System.Func{UnityFx.Async.IAsyncOperation{``0},``1})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ContinueWith``2(UnityFx.Async.IAsyncOperation{``0},System.Func{UnityFx.Async.IAsyncOperation{``0},System.Object,``1},System.Object)">
            <summary>
            Creates a continuation that executes when the target <see cref="T:UnityFx.Async.IAsyncOperation"/> completes.
            </summary>
            <param name="op">The operation to continue.</param>
            <param name="action">An action to run when the <paramref name="op"/> completes.</param>
            <param name="userState">A user-defined state object that is passed as second argument to <paramref name="action"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An operation that is executed after <paramref name="op"/> completes.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``2(UnityFx.Async.IAsyncOperation{``0},System.Func{UnityFx.Async.IAsyncOperation{``0},System.Object,``1},System.Object,UnityFx.Async.AsyncContinuationOptions)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ContinueWith``2(UnityFx.Async.IAsyncOperation{``0},System.Func{UnityFx.Async.IAsyncOperation{``0},System.Object,``1},System.Object,UnityFx.Async.AsyncContinuationOptions)">
            <summary>
            Creates a continuation that executes when the target <see cref="T:UnityFx.Async.IAsyncOperation"/> completes.
            </summary>
            <param name="op">The operation to continue.</param>
            <param name="action">An action to run when the <paramref name="op"/> completes.</param>
            <param name="userState">A user-defined state object that is passed as second argument to <paramref name="action"/>.</param>
            <param name="options">Options for when the <paramref name="action"/> is executed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An operation that is executed after <paramref name="op"/> completes.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``2(UnityFx.Async.IAsyncOperation{``0},System.Func{UnityFx.Async.IAsyncOperation{``0},System.Object,``1},System.Object)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Unwrap(UnityFx.Async.IAsyncOperation{UnityFx.Async.IAsyncOperation})">
            <summary>
            Creates a proxy <see cref="T:UnityFx.Async.IAsyncOperation"/> that represents the asynchronous operation of a <c>IAsyncOperation&lt;IAsyncOperation&gt;</c>.
            </summary>
            <param name="op">The source operation.</param>
            <returns>The unwrapped operation.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Unwrap``1(UnityFx.Async.IAsyncOperation{UnityFx.Async.IAsyncOperation{``0}})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Unwrap``1(UnityFx.Async.IAsyncOperation{UnityFx.Async.IAsyncOperation{``0}})">
            <summary>
            Creates a proxy <see cref="T:UnityFx.Async.IAsyncOperation`1"/> that represents the asynchronous operation of a <c>IAsyncOperation&lt;IAsyncOperation&lt;TResult&gt;&gt;</c>.
            </summary>
            <param name="op">The source operation.</param>
            <returns>The unwrapped operation.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Unwrap(UnityFx.Async.IAsyncOperation{UnityFx.Async.IAsyncOperation})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ToTask(UnityFx.Async.IAsyncOperation)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task"/> instance matching the source <see cref="T:UnityFx.Async.IAsyncOperation"/>.
            </summary>
            <param name="op">The target operation.</param>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ToTask``1(UnityFx.Async.IAsyncOperation{``0})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ToTask``1(UnityFx.Async.IAsyncOperation{``0})">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task"/> instance matching the source <see cref="T:UnityFx.Async.IAsyncOperation"/>.
            </summary>
            <param name="op">The target operation.</param>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ToTask(UnityFx.Async.IAsyncOperation)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.GetAwaiter(UnityFx.Async.IAsyncOperation)">
            <summary>
            Returns the operation awaiter. This method is intended for compiler use only.
            </summary>
            <param name="op">The operation to await.</param>
            <returns>An object that can be used to await the operation.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.GetAwaiter``1(UnityFx.Async.IAsyncOperation{``0})">
            <summary>
            Returns the operation awaiter. This method is intended for compiler use only.
            </summary>
            <param name="op">The operation to await.</param>
            <returns>An object that can be used to await the operation.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ConfigureAwait(UnityFx.Async.IAsyncOperation,System.Boolean)">
            <summary>
            Configures an awaiter used to await this operation.
            </summary>
            <param name="op">The operation to await.</param>
            <param name="continueOnCapturedContext">If <see langword="true"/> attempts to marshal the continuation back to the original context captured.</param>
            <returns>An object that can be used to await the operation.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ConfigureAwait``1(UnityFx.Async.IAsyncOperation{``0},System.Boolean)">
            <summary>
            Configures an awaiter used to await this operation.
            </summary>
            <param name="op">The operation to await.</param>
            <param name="continueOnCapturedContext">If <see langword="true"/> attempts to marshal the continuation back to the original context captured.</param>
            <returns>An object that can be used to await the operation.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ConfigureAwait(UnityFx.Async.IAsyncOperation,UnityFx.Async.AsyncCallbackOptions)">
            <summary>
            Configures an awaiter used to await this operation.
            </summary>
            <param name="op">The operation to await.</param>
            <param name="options">Specifies continuation options.</param>
            <returns>An object that can be used to await the operation.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ConfigureAwait``1(UnityFx.Async.IAsyncOperation{``0},UnityFx.Async.AsyncCallbackOptions)">
            <summary>
            Configures an awaiter used to await this operation.
            </summary>
            <param name="op">The operation to await.</param>
            <param name="options">Specifies continuation options.</param>
            <returns>An object that can be used to await the operation.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.AddCompletionCallback(UnityFx.Async.IAsyncOperationCallbacks,System.Action)">
            <summary>
            Adds a completion callback to be executed after the operation has completed. If the operation is already completed
            the <paramref name="callback"/> is called synchronously.
            </summary>
            <remarks>
            The <paramref name="callback"/> is invoked on a thread that registered the continuation (if it has a <see cref="T:System.Threading.SynchronizationContext"/> attached).
            Throwing an exception from the callback might cause unspecified behaviour.
            </remarks>
            <param name="op">The operation to schedule continuation for.</param>
            <param name="callback">The callback to be executed when the operation has completed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="callback"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation has been disposed.</exception>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.AddCompletionCallback(UnityFx.Async.IAsyncOperationCallbacks,System.Action,UnityFx.Async.AsyncCallbackOptions)">
            <summary>
            Adds a completion callback to be executed after the operation has completed. If the operation is already completed
            the <paramref name="callback"/> is invoked on a context specified via <paramref name="options"/>.
            </summary>
            <remarks>
            The <paramref name="callback"/> is invoked on a <see cref="T:System.Threading.SynchronizationContext"/> specified.
            Throwing an exception from the callback might cause unspecified behaviour.
            </remarks>
            <param name="op">The operation to schedule continuation for.</param>
            <param name="callback">The callback to be executed when the operation has completed.</param>
            <param name="options">Identifier of a <see cref="T:System.Threading.SynchronizationContext"/> to schedule callback on.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="callback"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation has been disposed.</exception>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.AddCompletionCallback(UnityFx.Async.IAsyncOperationCallbacks,System.Action{UnityFx.Async.IAsyncOperation})">
            <summary>
            Adds a completion callback to be executed after the operation has completed. If the operation is already completed
            the <paramref name="callback"/> is called synchronously.
            </summary>
            <remarks>
            The <paramref name="callback"/> is invoked on a thread that registered the continuation (if it has a <see cref="T:System.Threading.SynchronizationContext"/> attached).
            Throwing an exception from the callback might cause unspecified behaviour.
            </remarks>
            <param name="op">The operation to schedule continuation for.</param>
            <param name="callback">The callback to be executed when the operation has completed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="callback"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation has been disposed.</exception>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.AddCompletionCallback(UnityFx.Async.IAsyncOperationCallbacks,System.Action{UnityFx.Async.IAsyncOperation},UnityFx.Async.AsyncCallbackOptions)">
            <summary>
            Adds a completion callback to be executed after the operation has completed. If the operation is already completed
            the <paramref name="callback"/> is invoked on a context specified via <paramref name="options"/>.
            </summary>
            <remarks>
            The <paramref name="callback"/> is invoked on a <see cref="T:System.Threading.SynchronizationContext"/> specified.
            Throwing an exception from the callback might cause unspecified behaviour.
            </remarks>
            <param name="op">The operation to schedule continuation for.</param>
            <param name="callback">The callback to be executed when the operation has completed.</param>
            <param name="options">Identifier of a <see cref="T:System.Threading.SynchronizationContext"/> to schedule callback on.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="callback"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation has been disposed.</exception>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.AddCompletionCallback(UnityFx.Async.IAsyncOperationCallbacks,UnityFx.Async.IAsyncContinuation)">
            <summary>
            Adds a completion callback to be executed after the operation has completed. If the operation is already completed
            the <paramref name="callback"/> is called synchronously.
            </summary>
            <remarks>
            The <paramref name="callback"/> is invoked on a thread that registered the continuation (if it has a <see cref="T:System.Threading.SynchronizationContext"/> attached).
            Throwing an exception from the callback might cause unspecified behaviour.
            </remarks>
            <param name="op">The operation to schedule continuation for.</param>
            <param name="callback">The callback to be executed when the operation has completed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="callback"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation has been disposed.</exception>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.AddCompletionCallback(UnityFx.Async.IAsyncOperationCallbacks,UnityFx.Async.IAsyncContinuation,UnityFx.Async.AsyncCallbackOptions)">
            <summary>
            Adds a completion callback to be executed after the operation has completed. If the operation is already completed
            the <paramref name="callback"/> is invoked on a context specified via <paramref name="options"/>.
            </summary>
            <remarks>
            The <paramref name="callback"/> is invoked on a <see cref="T:System.Threading.SynchronizationContext"/> specified.
            Throwing an exception from the callback might cause unspecified behaviour.
            </remarks>
            <param name="op">The operation to schedule continuation for.</param>
            <param name="callback">The callback to be executed when the operation has completed.</param>
            <param name="options">Identifier of a <see cref="T:System.Threading.SynchronizationContext"/> to schedule callback on.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="callback"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation has been disposed.</exception>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.AddProgressCallback(UnityFx.Async.IAsyncOperationCallbacks,System.Action{System.Single})">
            <summary>
            Adds a callback to be executed when the operation progress has changed. If the operation is already completed
            the <paramref name="callback"/> is called synchronously.
            </summary>
            <remarks>
            The <paramref name="callback"/> is invoked on a thread that registered the callback (if it has a <see cref="T:System.Threading.SynchronizationContext"/> attached).
            Throwing an exception from the callback might cause unspecified behaviour.
            </remarks>
            <param name="op">The operation to schedule continuation for.</param>
            <param name="callback">The callback to be executed when the operation progress has changed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="callback"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation has been disposed.</exception>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.AddProgressCallback(UnityFx.Async.IAsyncOperationCallbacks,System.Action{System.Single},UnityFx.Async.AsyncCallbackOptions)">
            <summary>
            Adds a callback to be executed when the operation progress has changed. If the operation is already completed
            the <paramref name="callback"/> is invoked on a context specified via <paramref name="options"/>.
            </summary>
            <remarks>
            The <paramref name="callback"/> is invoked on a <see cref="T:System.Threading.SynchronizationContext"/> specified.
            Throwing an exception from the callback might cause unspecified behaviour.
            </remarks>
            <param name="op">The operation to schedule continuation for.</param>
            <param name="callback">The callback to be executed when the operation progress has changed.</param>
            <param name="options">Identifier of a <see cref="T:System.Threading.SynchronizationContext"/> to schedule callback on.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="callback"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation has been disposed.</exception>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.AddProgressCallback(UnityFx.Async.IAsyncOperationCallbacks,System.IProgress{System.Single})">
            <summary>
            Adds a callback to be executed when the operation progress has changed. If the operation is already completed
            the <paramref name="callback"/> is called synchronously.
            </summary>
            <remarks>
            The <paramref name="callback"/> is invoked on a thread that registered the callback (if it has a <see cref="T:System.Threading.SynchronizationContext"/> attached).
            Throwing an exception from the callback might cause unspecified behaviour.
            </remarks>
            <param name="op">The operation to schedule continuation for.</param>
            <param name="callback">The callback to be executed when the operation progress has changed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="callback"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation has been disposed.</exception>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.AddProgressCallback(UnityFx.Async.IAsyncOperationCallbacks,System.IProgress{System.Single},UnityFx.Async.AsyncCallbackOptions)">
            <summary>
            Adds a callback to be executed when the operation progress has changed. If the operation is already completed
            the <paramref name="callback"/> is invoked on a context specified via <paramref name="options"/>.
            </summary>
            <remarks>
            The <paramref name="callback"/> is invoked on a <see cref="T:System.Threading.SynchronizationContext"/> specified.
            Throwing an exception from the callback might cause unspecified behaviour.
            </remarks>
            <param name="op">The operation to schedule continuation for.</param>
            <param name="callback">The callback to be executed when the operation progress has changed.</param>
            <param name="options">Identifier of a <see cref="T:System.Threading.SynchronizationContext"/> to schedule callback on.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="callback"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation has been disposed.</exception>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.SetProgress(UnityFx.Async.IAsyncCompletionSource,System.Single)">
            <summary>
            Sets the operation progress value in range [0, 1].
            </summary>
            <param name="completionSource">The completion source instance.</param>
            <param name="progress">The operation progress in range [0, 1].</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="progress"/> is not in range [0, 1].</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the progress value cannot be set.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetCompleted(UnityFx.Async.IAsyncCompletionSource)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.SetProgress``1(UnityFx.Async.IAsyncCompletionSource{``0},System.Single)">
            <summary>
            Sets the operation progress value in range [0, 1].
            </summary>
            <param name="completionSource">The completion source instance.</param>
            <param name="progress">The operation progress in range [0, 1].</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="progress"/> is not in range [0, 1].</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the progress value cannot be set.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetResult``1(UnityFx.Async.IAsyncCompletionSource{``0},``0)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.SetCanceled(UnityFx.Async.IAsyncCompletionSource)">
            <summary>
            Transitions the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Canceled"/> state.
            </summary>
            <param name="completionSource">The completion source instance.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetException(UnityFx.Async.IAsyncCompletionSource,System.Exception)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetCompleted(UnityFx.Async.IAsyncCompletionSource)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.SetCanceled``1(UnityFx.Async.IAsyncCompletionSource{``0})">
            <summary>
            Transitions the underlying <see cref="T:UnityFx.Async.IAsyncOperation`1"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Canceled"/> state.
            </summary>
            <param name="completionSource">The completion source instance.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetException``1(UnityFx.Async.IAsyncCompletionSource{``0},System.Exception)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetResult``1(UnityFx.Async.IAsyncCompletionSource{``0},``0)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.TrySetException(UnityFx.Async.IAsyncCompletionSource,System.String)">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> state.
            </summary>
            <param name="completionSource">The completion source instance.</param>
            <param name="message">An exception message.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="message"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetException(UnityFx.Async.IAsyncCompletionSource,System.Exception)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetCanceled(UnityFx.Async.IAsyncCompletionSource)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetCompleted(UnityFx.Async.IAsyncCompletionSource)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.TrySetException``1(UnityFx.Async.IAsyncCompletionSource{``0},System.String)">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation`1"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> state.
            </summary>
            <param name="completionSource">The completion source instance.</param>
            <param name="message">An exception message.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="message"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetException``1(UnityFx.Async.IAsyncCompletionSource{``0},System.Exception)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetCanceled``1(UnityFx.Async.IAsyncCompletionSource{``0})"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetResult``1(UnityFx.Async.IAsyncCompletionSource{``0},``0)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.SetException(UnityFx.Async.IAsyncCompletionSource,System.String)">
            <summary>
            Transitions the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> state.
            </summary>
            <param name="completionSource">The completion source instance.</param>
            <param name="message">An exception message.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="message"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetException(UnityFx.Async.IAsyncCompletionSource,System.Exception)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetCanceled(UnityFx.Async.IAsyncCompletionSource)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetCompleted(UnityFx.Async.IAsyncCompletionSource)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.SetException``1(UnityFx.Async.IAsyncCompletionSource{``0},System.String)">
            <summary>
            Transitions the underlying <see cref="T:UnityFx.Async.IAsyncOperation`1"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> state.
            </summary>
            <param name="completionSource">The completion source instance.</param>
            <param name="message">An exception message.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="message"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetException``1(UnityFx.Async.IAsyncCompletionSource{``0},System.Exception)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetCanceled``1(UnityFx.Async.IAsyncCompletionSource{``0})"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetResult``1(UnityFx.Async.IAsyncCompletionSource{``0},``0)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.SetException(UnityFx.Async.IAsyncCompletionSource,System.Exception)">
            <summary>
            Transitions the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> state.
            </summary>
            <param name="completionSource">The completion source instance.</param>
            <param name="exception">An exception that caused the operation to end prematurely.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="exception"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetCanceled(UnityFx.Async.IAsyncCompletionSource)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetCompleted(UnityFx.Async.IAsyncCompletionSource)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.SetException``1(UnityFx.Async.IAsyncCompletionSource{``0},System.Exception)">
            <summary>
            Transitions the underlying <see cref="T:UnityFx.Async.IAsyncOperation`1"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> state.
            </summary>
            <param name="completionSource">The completion source instance.</param>
            <param name="exception">An exception that caused the operation to end prematurely.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="exception"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetException``1(UnityFx.Async.IAsyncCompletionSource{``0},System.Exception)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetCanceled``1(UnityFx.Async.IAsyncCompletionSource{``0})"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetResult``1(UnityFx.Async.IAsyncCompletionSource{``0},``0)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.SetCompleted(UnityFx.Async.IAsyncCompletionSource)">
            <summary>
            Transitions the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> state.
            </summary>
            <param name="completionSource">The completion source instance.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetCanceled(UnityFx.Async.IAsyncCompletionSource)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetException(UnityFx.Async.IAsyncCompletionSource,System.Exception)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.SetResult``1(UnityFx.Async.IAsyncCompletionSource{``0},``0)">
            <summary>
            Transitions the underlying <see cref="T:UnityFx.Async.IAsyncOperation`1"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> state.
            </summary>
            <param name="completionSource">The completion source instance.</param>
            <param name="result">The operation result.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetCanceled``1(UnityFx.Async.IAsyncCompletionSource{``0})"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetException``1(UnityFx.Async.IAsyncCompletionSource{``0},System.Exception)"/>
        </member>
        <member name="T:UnityFx.Async.AsyncOperationStatus">
            <summary>
            Enumerates possible status values for <see cref="T:UnityFx.Async.IAsyncOperation"/>.
            </summary>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskstatus">TaskStatus</seealso>
            <seealso cref="T:UnityFx.Async.IAsyncOperation"/>
        </member>
        <member name="F:UnityFx.Async.AsyncOperationStatus.Created">
            <summary>
            The operation is initialized but has not yet been scheduled for execution.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncOperationStatus.Scheduled">
            <summary>
            The operation has been scheduled for execution but has not yet begun executing.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncOperationStatus.Running">
            <summary>
            The operation is running but has not yet completed.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion">
            <summary>
            The operation completed execution successfully.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncOperationStatus.Canceled">
            <summary>
            The operation has been canceled.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncOperationStatus.Faulted">
            <summary>
            The operation completed due to an unhandled exception.
            </summary>
        </member>
        <member name="T:UnityFx.Async.AsyncResult">
            <summary>
            A lightweight <c>net35</c>-compatible asynchronous operation (promise) for <c>Unity3d</c>.
            </summary>
            <remarks>
            This class is the core entity of the library. In many aspects it mimics <c>Task</c> interface and behaviour.
            For example, any <see cref="T:UnityFx.Async.AsyncResult"/> instance can have any number of continuations (added either explicitly
            via <c>AddCompletionCallback</c> call or implicitly using <c>async</c>/<c>await</c> keywords). These continuations
            can be invoked on a an arbitrary <see cref="T:System.Threading.SynchronizationContext"/>. The class can be used to implement Asynchronous
            Programming Model (APM). There are operation state accessors that can be used exactly like corresponding properties of
            <c>Task</c>. While the class implements <see cref="T:System.IDisposable"/> disposing is only required if <see cref="P:UnityFx.Async.AsyncResult.AsyncWaitHandle"/>
            property was used.
            </remarks>
            <threadsafety static="true" instance="true"/>
            <seealso href="http://www.what-could-possibly-go-wrong.com/promises-for-game-development/">Promises for game development</seealso>
            <seealso href="https://blogs.msdn.microsoft.com/nikos/2011/03/14/how-to-implement-the-iasyncresult-design-pattern/">How to implement the IAsyncResult design pattern</seealso>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/task-based-asynchronous-programming">Task-based Asynchronous Pattern (TAP)</seealso>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm">Asynchronous Programming Model (APM)</seealso>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task">Task</seealso>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskcompletionsource-1">TaskCompletionSource</seealso>
            <seealso cref="T:UnityFx.Async.AsyncCompletionSource"/>
            <seealso cref="T:UnityFx.Async.AsyncResult`1"/>
            <seealso cref="T:System.IAsyncResult"/>
        </member>
        <member name="E:UnityFx.Async.AsyncResult.ProgressChanged">
            <summary>
            Raised when the operation progress is changed.
            </summary>
            <remarks>
            The event handler is invoked on a thread that registered it (if it has a <see cref="T:System.Threading.SynchronizationContext"/> attached).
            If the operation is already completed the event handler is called synchronously. Throwing an exception from the event handler
            might cause unspecified behaviour.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the delegate being registered is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation has been disposed.</exception>
            <seealso cref="E:UnityFx.Async.AsyncResult.Completed"/>
        </member>
        <member name="E:UnityFx.Async.AsyncResult.Completed">
            <summary>
            Raised when the operation is completed.
            </summary>
            <remarks>
            The event handler is invoked on a thread that registered it (if it has a <see cref="T:System.Threading.SynchronizationContext"/> attached).
            If the operation is already completed the event handler is called synchronously. Throwing an exception from the event handler
            might cause unspecified behaviour.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the delegate being registered is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation has been disposed.</exception>
            <seealso cref="E:UnityFx.Async.AsyncResult.ProgressChanged"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.AddCompletionCallback(System.Object,System.Threading.SynchronizationContext)">
            <summary>
            Adds a completion callback to be executed after the operation has completed. If the operation is completed <paramref name="action"/> is invoked
            on the <paramref name="syncContext"/> specified.
            </summary>
            <remarks>
            The <paramref name="action"/> is invoked on a <see cref="T:System.Threading.SynchronizationContext"/> specified. Throwing an exception from the callback might cause unspecified behaviour.
            </remarks>
            <param name="action">The callback to be executed when the operation has completed. Can be one of <see cref="T:System.Action"/>, <see cref="T:System.Action`1"/>
            (with <see cref="T:UnityFx.Async.IAsyncOperation"/> argument type), <see cref="T:System.AsyncCallback"/>, <see cref="T:UnityFx.Async.IAsyncContinuation"/> or <see cref="T:System.ComponentModel.AsyncCompletedEventHandler"/>.</param>
            <param name="syncContext">If not <see langword="null"/> method attempts to marshal the continuation to the synchronization context.
            Otherwise the callback is invoked on a thread that initiated the operation completion.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation has been disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncResult.AddProgressCallback(System.Object,System.Threading.SynchronizationContext)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.RemoveCallback(System.Object)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.AddProgressCallback(System.Object,System.Threading.SynchronizationContext)">
            <summary>
            Adds a callback to be executed when the operation progress has changed. If the operation is completed <paramref name="action"/> is invoked
            on the <paramref name="syncContext"/> specified.
            </summary>
            <remarks>
            The <paramref name="action"/> is invoked on a <see cref="T:System.Threading.SynchronizationContext"/> specified. Throwing an exception from the callback might cause unspecified behaviour.
            </remarks>
            <param name="action">The callback to be executed when the operation progress has changed.</param>
            <param name="syncContext">If not <see langword="null"/> method attempts to marshal the continuation to the synchronization context.
            Otherwise the callback is invoked on a thread that initiated the operation.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation has been disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncResult.AddCompletionCallback(System.Object,System.Threading.SynchronizationContext)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.RemoveCallback(System.Object)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.RemoveCallback(System.Object)">
            <summary>
            Removes an existing completion/progress callback.
            </summary>
            <param name="action">The callback to remove. Can be <see langword="null"/>.</param>
            <returns>Returns <see langword="true"/> if <paramref name="action"/> was removed; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.AddCompletionCallback(System.Object,System.Threading.SynchronizationContext)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.AddProgressCallback(System.Object,System.Threading.SynchronizationContext)"/>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.DefaultSynchronizationContext">
            <summary>
            Gets or sets a reference to <see cref="T:System.Threading.SynchronizationContext"/> that is used for majority of continuations.
            </summary>
            <remarks>
            This property is supposed to be used as allocation optimization in applications working mostly with single
            <see cref="T:System.Threading.SynchronizationContext"/> instance (such as Unity3d applications). Usually this should be set to
            a context attached to the app UI thread.
            </remarks>
            <value>An instance of <see cref="T:System.Threading.SynchronizationContext"/> that is used as default one. Initial value is <see langword="null"/>.</value>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.CreationOptions">
            <summary>
            Gets the <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to create this operation.
            </summary>
            <value>The operation creation options.</value>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.IsStarted">
            <summary>
            Gets a value indicating whether the operation has been started.
            </summary>
            <value>A value indicating whether the operation has been started.</value>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.IsRunning">
            <summary>
            Gets a value indicating whether the operation in running.
            </summary>
            <value>A value indicating whether the operation is running.</value>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.IsDisposed">
            <summary>
            Gets a value indicating whether the operation instance is disposed.
            </summary>
            <value>A value indicating whether the operation is disposed.</value>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.IsCancellationRequested">
            <summary>
            Gets a value indicating whether the operation cancellation was requested.
            </summary>
            <value>A value indicating whether the operation cancellation was requested.</value>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult"/> class.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult"/> class.
            </summary>
            <param name="asyncCallback">User-defined completion callback.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:UnityFx.Async.AsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.#ctor(UnityFx.Async.AsyncCreationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult"/> class with the specified <see cref="P:UnityFx.Async.AsyncResult.CreationOptions"/>.
            </summary>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.#ctor(UnityFx.Async.AsyncCreationOptions,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult"/> class.
            </summary>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:UnityFx.Async.AsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.#ctor(UnityFx.Async.AsyncCreationOptions,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult"/> class.
            </summary>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
            <param name="asyncCallback">User-defined completion callback.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:UnityFx.Async.AsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.#ctor(UnityFx.Async.AsyncOperationStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult"/> class with the specified <see cref="P:UnityFx.Async.AsyncResult.Status"/>.
            </summary>
            <param name="status">Initial value of the <see cref="P:UnityFx.Async.AsyncResult.Status"/> property.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.#ctor(UnityFx.Async.AsyncOperationStatus,UnityFx.Async.AsyncCreationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult"/> class with the specified <see cref="P:UnityFx.Async.AsyncResult.Status"/> and <see cref="P:UnityFx.Async.AsyncResult.CreationOptions"/>.
            </summary>
            <param name="status">Initial value of the <see cref="P:UnityFx.Async.AsyncResult.Status"/> property.</param>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.#ctor(UnityFx.Async.AsyncOperationStatus,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult"/> class with the specified <see cref="P:UnityFx.Async.AsyncResult.Status"/>.
            </summary>
            <param name="status">Initial value of the <see cref="P:UnityFx.Async.AsyncResult.Status"/> property.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:UnityFx.Async.AsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.#ctor(UnityFx.Async.AsyncOperationStatus,UnityFx.Async.AsyncCreationOptions,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult"/> class with the specified <see cref="P:UnityFx.Async.AsyncResult.Status"/> and <see cref="P:UnityFx.Async.AsyncResult.CreationOptions"/>.
            </summary>
            <param name="status">Initial value of the <see cref="P:UnityFx.Async.AsyncResult.Status"/> property.</param>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:UnityFx.Async.AsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.#ctor(UnityFx.Async.AsyncOperationStatus,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult"/> class with the specified <see cref="P:UnityFx.Async.AsyncResult.Status"/>.
            </summary>
            <param name="status">Initial value of the <see cref="P:UnityFx.Async.AsyncResult.Status"/> property.</param>
            <param name="asyncCallback">User-defined completion callback.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:UnityFx.Async.AsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.#ctor(UnityFx.Async.AsyncOperationStatus,UnityFx.Async.AsyncCreationOptions,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult"/> class with the specified <see cref="P:UnityFx.Async.AsyncResult.Status"/> and <see cref="P:UnityFx.Async.AsyncResult.CreationOptions"/>.
            </summary>
            <param name="status">Initial value of the <see cref="P:UnityFx.Async.AsyncResult.Status"/> property.</param>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
            <param name="asyncCallback">User-defined completion callback.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:UnityFx.Async.AsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.#ctor(System.Exception,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult"/> class that is faulted. For internal use only.
            </summary>
            <param name="exception">The exception to complete the operation with.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:UnityFx.Async.AsyncResult.AsyncState"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="exception"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Start">
            <summary>
            Transitions the operation into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Running"/> state.
            </summary>
            <remarks>
            <para>An operation may be started on once. Any attempts to schedule it a second time will result in an exception.</para>
            <para>The <see cref="M:UnityFx.Async.AsyncResult.Start"/> is used to execute an operation that has been created by calling one of the constructors.
            Typically, you do this when you need to separate the operation's creation from its execution, such as when you conditionally
            execute operations that you've created.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition has failed.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncResult.TryStart"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetRunning"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.OnStarted"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TryStart">
            <summary>
            Attempts to transitions the operation into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Running"/> state.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the operation status was changed to <see cref="F:UnityFx.Async.AsyncOperationStatus.Running"/>; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Start"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetRunning"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.OnStarted"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TrySetScheduled">
            <summary>
            Attempts to transition the operation into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Scheduled"/> state.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetRunning"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TrySetRunning">
            <summary>
            Attempts to transition the operation into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Running"/> state.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetScheduled"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TrySetCanceled">
            <summary>
            Attempts to transition the operation into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Canceled"/> state.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetCanceled(System.Boolean)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TrySetCanceled(System.Boolean)">
            <summary>
            Attempts to transition the operation into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Canceled"/> state.
            </summary>
            <param name="completedSynchronously">Value of the <see cref="P:UnityFx.Async.AsyncResult.CompletedSynchronously"/> property.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetCanceled"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TrySetException(System.String)">
            <summary>
            Attempts to transition the operation into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/>. The method calls <see cref="M:UnityFx.Async.AsyncResult.TrySetException(System.Exception)"/>
            passing a new <see cref="T:System.Exception"/> instance with the specified <paramref name="message"/>.
            </summary>
            <param name="message">An exception message.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="message"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetException(System.Exception)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TrySetException(System.String,System.Boolean)">
            <summary>
            Attempts to transition the operation into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/>. The method calls <see cref="M:UnityFx.Async.AsyncResult.TrySetException(System.Exception,System.Boolean)"/>
            passing a new <see cref="T:System.Exception"/> instance with the specified <paramref name="message"/>.
            </summary>
            <param name="message">An exception message.</param>
            <param name="completedSynchronously">Value of the <see cref="P:UnityFx.Async.AsyncResult.CompletedSynchronously"/> property.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="message"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetException(System.Exception,System.Boolean)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TrySetException(System.Exception)">
            <summary>
            Attempts to transition the operation into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> (or <see cref="F:UnityFx.Async.AsyncOperationStatus.Canceled"/>
            if the exception is <see cref="T:System.OperationCanceledException"/>) state.
            </summary>
            <param name="exception">An exception that caused the operation to end prematurely.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="exception"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetException(System.Exception,System.Boolean)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TrySetException(System.Exception,System.Boolean)">
            <summary>
            Attempts to transition the operation into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> (or <see cref="F:UnityFx.Async.AsyncOperationStatus.Canceled"/>
            if the exception is <see cref="T:System.OperationCanceledException"/>) state.
            </summary>
            <param name="exception">An exception that caused the operation to end prematurely.</param>
            <param name="completedSynchronously">Value of the <see cref="P:UnityFx.Async.AsyncResult.CompletedSynchronously"/> property.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="exception"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetException(System.Exception)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TrySetCompleted">
            <summary>
            Attempts to transition the operation into the <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> state.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetCompleted(System.Boolean)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TrySetCompleted(System.Boolean)">
            <summary>
            Attempts to transition the operation into the <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> state.
            </summary>
            <param name="completedSynchronously">Value of the <see cref="P:UnityFx.Async.AsyncResult.CompletedSynchronously"/> property.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetCompleted"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TryReportProgress">
            <summary>
            Reports changes in operation progress value.
            </summary>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.ThrowIfNonSuccess">
            <summary>
            Throws exception if the operation has failed or canceled.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.ThrowIfDisposed">
            <summary>
            Throws <see cref="T:System.ObjectDisposedException"/> if this operation has been disposed.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.GetNewId">
            <summary>
            Gets a unique ID for an <see cref="T:UnityFx.Async.AsyncResult"/> instance.
            </summary>
            <remarks>
            This method should be used by all <see cref="T:UnityFx.Async.IAsyncOperation"/> implementation for generating value of the <see cref="P:UnityFx.Async.IAsyncOperation.Id"/> property.
            </remarks>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.GetProgress">
            <summary>
            Called when the progress is requested. Default implementation returns 0.
            </summary>
            <remarks>
            Make sure that each method call returns a value greater or equal to the previous. It is important for
            progress reporting consistency.
            </remarks>
            <seealso cref="P:UnityFx.Async.AsyncResult.Progress"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.OnProgressChanged"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.TryReportProgress"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.OnProgressChanged">
            <summary>
            Called when the progress value has changed. Default implementation does nothing.
            </summary>
            <remarks>
            Throwing an exception in this method results in unspecified behaviour.
            </remarks>
            <seealso cref="P:UnityFx.Async.AsyncResult.Progress"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.GetProgress"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.TryReportProgress"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.OnStatusChanged(UnityFx.Async.AsyncOperationStatus)">
            <summary>
            Called when the operation state has changed. Default implementation does nothing.
            </summary>
            <param name="status">The new status value.</param>
            <remarks>
            Throwing an exception in this method results in unspecified behaviour.
            </remarks>
            <seealso cref="P:UnityFx.Async.AsyncResult.Status"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetScheduled"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetRunning"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetCanceled(System.Boolean)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetCompleted(System.Boolean)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetException(System.Exception,System.Boolean)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.OnStarted">
            <summary>
            Called when the operation is started (<see cref="P:UnityFx.Async.AsyncResult.Status"/> is set to <see cref="F:UnityFx.Async.AsyncOperationStatus.Running"/>). Default implementation does nothing.
            </summary>
            <seealso cref="M:UnityFx.Async.AsyncResult.OnCompleted"/>
            <seealso cref="P:UnityFx.Async.AsyncResult.Status"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.Start"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.TryStart"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetRunning"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.OnCancel">
            <summary>
            Called when the operation cancellation has been requested. Default implementation does nothing.
            </summary>
            <seealso cref="M:UnityFx.Async.AsyncResult.Cancel"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.OnCompleted">
            <summary>
            Called when the operation is completed. Default implementation does nothing.
            </summary>
            <remarks>
            Throwing an exception in this method results in unspecified behaviour.
            </remarks>
            <seealso cref="M:UnityFx.Async.AsyncResult.OnStarted"/>
            <seealso cref="P:UnityFx.Async.AsyncResult.Status"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetCanceled(System.Boolean)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetCompleted(System.Boolean)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.TrySetException(System.Exception,System.Boolean)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged resources used by the object.
            </summary>
            <remarks>
            Unlike most of the members of <see cref="T:UnityFx.Async.AsyncResult"/>, this method is not thread-safe. Do not throw exceptions in <see cref="M:UnityFx.Async.AsyncResult.Dispose(System.Boolean)"/>.
            </remarks>
            <param name="disposing">A <see langword="bool"/> value that indicates whether this method is being called due to a call to <see cref="M:UnityFx.Async.AsyncResult.Dispose"/>.</param>
            <seealso cref="M:UnityFx.Async.AsyncResult.Dispose"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.ThrowIfDisposed"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TrySetStatus(System.Int32)">
            <summary>
            Special status setter for <see cref="F:UnityFx.Async.AsyncOperationStatus.Scheduled"/> and <see cref="F:UnityFx.Async.AsyncOperationStatus.Running"/>.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TrySetCompleted(System.Int32,System.Boolean)">
            <summary>
            Sets the operation status to one of <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/>/<see cref="F:UnityFx.Async.AsyncOperationStatus.Canceled"/>/<see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/>.
            The call does the same as calling <see cref="M:UnityFx.Async.AsyncResult.TryReserveCompletion"/> and <see cref="M:UnityFx.Async.AsyncResult.SetCompleted(System.Int32,System.Boolean)"/> but uses one interlocked operation instead of two.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TryReserveCompletion">
            <summary>
            Initiates operation completion. Should only be used in pair with <see cref="M:UnityFx.Async.AsyncResult.SetCompleted(System.Int32,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TrySetFlag(System.Int32)">
            <summary>
            Attempts to add a new flag value.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.SetCompleted(System.Int32,System.Boolean)">
            <summary>
            Unconditionally sets the operation status to one of <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/>/<see cref="F:UnityFx.Async.AsyncOperationStatus.Canceled"/>/<see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/>.
            Should only be called if <see cref="M:UnityFx.Async.AsyncResult.TryReserveCompletion"/> call succeeded.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.CopyCompletionState(UnityFx.Async.IAsyncOperation,System.Boolean)">
            <summary>
            Copies state of the specified operation.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TryCopyCompletionState(UnityFx.Async.IAsyncOperation,System.Boolean)">
            <summary>
            Attemts to copy state of the specified operation.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.ReportProgress">
            <summary>
            Unconditionally reports the operation progress.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TryThrowException(System.Exception)">
            <summary>
            Rethrows the specified exception.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.GetSynchronizationContext(UnityFx.Async.AsyncCallbackOptions)">
            <summary>
            Returns a <see cref="T:System.Threading.SynchronizationContext"/> for the given options.
            </summary>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.Id">
            <summary>
            Gets a unique ID for the operation instance.
            </summary>
            <value>Unique non-zero identifier of the operation instance.</value>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.Progress">
            <summary>
            Gets the operation progress in range [0, 1].
            </summary>
            <value>Progress of the operation in range [0, 1].</value>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.Status">
            <summary>
            Gets the operation status identifier.
            </summary>
            <value>Identifier of the operation status.</value>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.Exception">
            <summary>
            Gets an exception that caused the operation to end prematurely. If the operation completed successfully
            or has not yet thrown any exceptions, this will return <see langword="null"/>.
            </summary>
            <value>An exception that caused the operation to end prematurely.</value>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.IsCompletedSuccessfully">
            <summary>
            Gets a value indicating whether the operation completed successfully (i.e. with <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> status).
            </summary>
            <value>A value indicating whether the operation completed successfully.</value>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.IsFaulted">
            <summary>
            Gets a value indicating whether the operation completed due to an unhandled exception (i.e. with <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> status).
            </summary>
            <value>A value indicating whether the operation has failed.</value>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.IsCanceled">
            <summary>
            Gets a value indicating whether the operation completed due to being canceled (i.e. with <see cref="F:UnityFx.Async.AsyncOperationStatus.Canceled"/> status).
            </summary>
            <value>A value indicating whether the operation was canceled.</value>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Invoke(UnityFx.Async.IAsyncOperation)">
            <summary>
            Invokes the operation-specific continuation logic. Default implementation attempts to run the operation is <paramref name="op"/> has succeeded;
            otherwise the operation transitions to failed state.
            </summary>
            <param name="op">The completed antecedent operation.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Cancel">
            <summary>
            Initiates cancellation of an asynchronous operation.
            </summary>
            <remarks>
            There is no guarantee that this call will actually cancel the operation or that the operation will be cancelled immidiately.
            <see cref="F:UnityFx.Async.AsyncCreationOptions.SuppressCancellation"/> can be used to suppress this method for a specific operation instance.
            </remarks>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.AsyncWaitHandle">
            <summary>
            Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.
            </summary>
            <remarks>
            The handle is lazily allocated on the first property access. Make sure to call <see cref="M:UnityFx.Async.AsyncResult.Dispose"/> when
            the operation instance is not in use.
            </remarks>
            <value>A <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.</value>
            <seealso cref="M:UnityFx.Async.AsyncResult.Dispose"/>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
            <value>A user-defined object that qualifies or contains information about an asynchronous operation.</value>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.CompletedSynchronously">
            <summary>
            Gets a value indicating whether the asynchronous operation completed synchronously.
            </summary>
            <remarks>
            For the vast majority of cases this is <see langword="false"/>. Do not rely on this vlaue.
            </remarks>
            <value><see langword="true"/> if the asynchronous operation completed synchronously; otherwise, <see langword="false"/>.</value>
            <seealso cref="P:UnityFx.Async.AsyncResult.IsCompleted"/>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.IsCompleted">
            <summary>
            Gets a value indicating whether the asynchronous operation has completed.
            </summary>
            <value><see langword="true"/> if the operation is complete; otherwise, <see langword="false"/>.</value>
            <seealso cref="P:UnityFx.Async.AsyncResult.CompletedSynchronously"/>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <remarks>
            Not implemented. Always returns <see langword="null"/>.
            </remarks>
            <value>
            The current element in the collection.
            </value>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.System#Collections#IEnumerator#MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <remarks>
            Checks whether the operation is completed. Returns <see langword="false"/> if it is; otherwise, <see langword="true"/>.
            </remarks>
            <returns>Returns <see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.System#Collections#IEnumerator#Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <remarks>
            Not implemented. Always throws <see cref="T:System.NotSupportedException"/>.
            </remarks>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Dispose">
            <summary>
            Disposes the <see cref="T:UnityFx.Async.AsyncResult"/>, releasing all of its unmanaged resources. This call is only required if
            <see cref="P:UnityFx.Async.AsyncResult.AsyncWaitHandle"/> was accessed; otherwise it is safe to ignore this method.
            </summary>
            <remarks>
            Unlike most of the members of <see cref="T:UnityFx.Async.AsyncResult"/>, this method is not thread-safe.
            Also, <see cref="M:UnityFx.Async.AsyncResult.Dispose"/> may only be called on an <see cref="T:UnityFx.Async.AsyncResult"/> that is in one of
            the final states: <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/>, <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> or
            <see cref="F:UnityFx.Async.AsyncOperationStatus.Canceled"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the operation is not completed.</exception>
            <seealso cref="M:UnityFx.Async.AsyncResult.Dispose(System.Boolean)"/>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.CompletedOperation">
            <summary>
            Gets an operation that's already been completed successfully.
            </summary>
            <remarks>
            Note that <see cref="M:UnityFx.Async.AsyncResult.Dispose"/> call have no effect on operations returned with the property. May not always return the same instance.
            </remarks>
            <value>Completed <see cref="T:UnityFx.Async.IAsyncOperation"/> instance.</value>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.FaultedOperation">
            <summary>
            Gets a faulted operation.
            </summary>
            <remarks>
            Note that <see cref="M:UnityFx.Async.AsyncResult.Dispose"/> call have no effect on operations returned with the property. May not always return the same instance.
            </remarks>
            <value>Faulted <see cref="T:UnityFx.Async.IAsyncOperation"/> instance.</value>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.CanceledOperation">
            <summary>
            Gets an operation that's already been canceled.
            </summary>
            <remarks>
            Note that <see cref="M:UnityFx.Async.AsyncResult.Dispose"/> call have no effect on operations returned with the property. May not always return the same instance.
            </remarks>
            <value>Canceled <see cref="T:UnityFx.Async.IAsyncOperation"/> instance.</value>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Yield">
            <summary>
            Creates an awaitable that asynchronously yields back to the current context when awaited (works the same as <see cref="M:System.Threading.Tasks.Task.Yield"/>).
            </summary>
            <returns>
            A context that, when awaited, will asynchronously transition back into the current context at the
            time of the await. If the current <see cref="T:System.Threading.SynchronizationContext"/> is non-<see langword="null"/>,
            that is treated as the current context. Otherwise, the continuation is executed on the <see cref="T:System.Threading.ThreadPool"/>.
            </returns>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromCanceled">
            <summary>
            Creates a <see cref="T:UnityFx.Async.IAsyncOperation"/> that is canceled.
            </summary>
            <returns>A canceled operation.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromCanceled(System.Object)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromException(System.Exception)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromResult``1(``0)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromCanceled(System.Object)">
            <summary>
            Creates a <see cref="T:UnityFx.Async.IAsyncOperation"/> that is canceled.
            </summary>
            <param name="asyncState">User-defined data returned by <see cref="P:UnityFx.Async.AsyncResult.AsyncState"/>.</param>
            <returns>A canceled operation.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromCanceled"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromException(System.Exception)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromResult``1(``0,System.Object)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromCanceled``1">
            <summary>
            Creates a <see cref="T:UnityFx.Async.IAsyncOperation`1"/> that is canceled.
            </summary>
            <returns>A canceled operation.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromCanceled``1(System.Object)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromException``1(System.Exception)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromResult``1(``0)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromCanceled``1(System.Object)">
            <summary>
            Creates a <see cref="T:UnityFx.Async.IAsyncOperation`1"/> that is canceled.
            </summary>
            <param name="asyncState">User-defined data returned by <see cref="P:UnityFx.Async.AsyncResult.AsyncState"/>.</param>
            <returns>A canceled operation.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromCanceled``1"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromException``1(System.Exception)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromResult``1(``0,System.Object)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromException(System.String)">
            <summary>
            Creates a <see cref="T:UnityFx.Async.IAsyncOperation"/> that has completed with the specified error message.
            </summary>
            <param name="message">An exception message.</param>
            <returns>A faulted operation.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromException(System.Exception)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromCanceled"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromResult``1(``0)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromException(System.String,System.Object)">
            <summary>
            Creates a <see cref="T:UnityFx.Async.IAsyncOperation"/> that has completed with a specified error message.
            </summary>
            <param name="message">An exception message.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:UnityFx.Async.AsyncResult.AsyncState"/>.</param>
            <returns>A faulted operation.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromException(System.Exception,System.Object)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromCanceled(System.Object)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromResult``1(``0,System.Object)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromException(System.Exception)">
            <summary>
            Creates a <see cref="T:UnityFx.Async.IAsyncOperation"/> that has completed with a specified exception.
            </summary>
            <param name="exception">The exception to complete the operation with.</param>
            <returns>A faulted operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="exception"/> is <see langword="null"/>.</exception>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromException(System.Exception,System.Object)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromException(System.String)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromCanceled"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromResult``1(``0)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromException(System.Exception,System.Object)">
            <summary>
            Creates a <see cref="T:UnityFx.Async.IAsyncOperation"/> that has completed with a specified exception.
            </summary>
            <param name="exception">The exception to complete the operation with.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:UnityFx.Async.AsyncResult.AsyncState"/>.</param>
            <returns>A faulted operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="exception"/> is <see langword="null"/>.</exception>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromException(System.Exception)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromException(System.String,System.Object)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromCanceled(System.Object)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromResult``1(``0,System.Object)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromException``1(System.String)">
            <summary>
            Creates a <see cref="T:UnityFx.Async.IAsyncOperation`1"/> that has completed with a specified error message.
            </summary>
            <param name="message">An exception message.</param>
            <returns>A faulted operation.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromException``1(System.Exception)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromCanceled``1"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromResult``1(``0)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromException``1(System.String,System.Object)">
            <summary>
            Creates a <see cref="T:UnityFx.Async.IAsyncOperation`1"/> that has completed with a specified error message.
            </summary>
            <param name="message">An exception message.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:UnityFx.Async.AsyncResult.AsyncState"/>.</param>
            <returns>A faulted operation.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromException``1(System.Exception,System.Object)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromCanceled``1(System.Object)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromResult``1(``0,System.Object)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromException``1(System.Exception)">
            <summary>
            Creates a <see cref="T:UnityFx.Async.IAsyncOperation`1"/> that has completed with a specified exception.
            </summary>
            <param name="exception">The exception to complete the operation with.</param>
            <returns>A faulted operation.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromException(System.String)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromException``1(System.Exception,System.Object)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromCanceled``1"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromResult``1(``0)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromException``1(System.Exception,System.Object)">
            <summary>
            Creates a <see cref="T:UnityFx.Async.IAsyncOperation`1"/> that has completed with a specified exception.
            </summary>
            <param name="exception">The exception to complete the operation with.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:UnityFx.Async.AsyncResult.AsyncState"/>.</param>
            <returns>A faulted operation.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromException(System.String,System.Object)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromException``1(System.Exception)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromCanceled``1(System.Object)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromResult``1(``0,System.Object)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromResult``1(``0)">
            <summary>
            Creates a <see cref="T:UnityFx.Async.IAsyncOperation`1"/> that has completed with a specified result.
            </summary>
            <param name="result">The result value with which to complete the operation.</param>
            <returns>A completed operation with the specified result value.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromResult``1(``0,System.Object)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromCanceled``1"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromException``1(System.Exception)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromResult``1(``0,System.Object)">
            <summary>
            Creates a <see cref="T:UnityFx.Async.IAsyncOperation`1"/> that has completed with a specified result.
            </summary>
            <param name="result">The result value with which to complete the operation.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:UnityFx.Async.AsyncResult.AsyncState"/>.</param>
            <returns>A completed operation with the specified result value.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromResult``1(``0)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromCanceled``1(System.Object)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromException``1(System.Exception)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromAction(System.Action)">
            <summary>
            Creates a completed <see cref="T:UnityFx.Async.IAsyncOperation"/> that represents result of the <paramref name="action"/> specified.
            </summary>
            <param name="action">The delegate to execute.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>A completed operation that represents <paramref name="action"/> result.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromAction``1(System.Action{``0},``0)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromAction(System.Threading.SendOrPostCallback,System.Object)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromAction``1(System.Func{``0})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromAction``1(System.Action{``0},``0)">
            <summary>
            Creates a completed <see cref="T:UnityFx.Async.IAsyncOperation"/> that represents result of the <paramref name="action"/> specified.
            </summary>
            <param name="action">The delegate to execute.</param>
            <param name="state">User-defained state to pass to the <paramref name="action"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>A completed operation that represents <paramref name="action"/> result.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromAction(System.Action)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromAction(System.Threading.SendOrPostCallback,System.Object)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromAction``1(System.Func{``0})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromAction(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Creates a completed <see cref="T:UnityFx.Async.IAsyncOperation"/> that represents result of the <paramref name="callback"/> specified.
            </summary>
            <param name="callback">The delegate to execute.</param>
            <param name="state">User-defained state to pass to the <paramref name="callback"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="callback"/> is <see langword="null"/>.</exception>
            <returns>A completed operation that represents <paramref name="callback"/> result.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromAction(System.Action)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromAction``1(System.Action{``0},``0)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromAction``1(System.Func{``0})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromAction(System.Delegate,System.Object[])">
            <summary>
            Creates a completed <see cref="T:UnityFx.Async.IAsyncOperation"/> that represents result of the <paramref name="callback"/> specified.
            </summary>
            <param name="callback">The delegate to execute.</param>
            <param name="args">Arguments of the <paramref name="callback"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="callback"/> is <see langword="null"/>.</exception>
            <returns>A completed operation that represents the <paramref name="callback"/> result.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromAction(System.Action)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromAction(System.Threading.SendOrPostCallback,System.Object)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromAction``1(System.Func{``0})">
            <summary>
            Creates a completed <see cref="T:UnityFx.Async.IAsyncOperation`1"/> that represents result of the <paramref name="action"/> specified.
            </summary>
            <param name="action">The delegate to execute.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>A completed operation that represents <paramref name="action"/> result.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromAction(System.Action)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromAction``2(System.Func{``0,``1},``0)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromAction``2(System.Func{``0,``1},``0)">
            <summary>
            Creates a completed <see cref="T:UnityFx.Async.IAsyncOperation"/> that represents result of the <paramref name="action"/> specified.
            </summary>
            <param name="action">The delegate to execute.</param>
            <param name="state">User-defained state to pass to the <paramref name="action"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>A completed operation that represents <paramref name="action"/> result.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromAction``1(System.Action{``0},``0)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromAction``1(System.Func{``0})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromTask(System.Threading.Tasks.Task)">
            <summary>
            Creates an <see cref="T:UnityFx.Async.IAsyncOperation"/> instance that completes when the specified <paramref name="task"/> completes.
            </summary>
            <param name="task">The source <see cref="T:System.Threading.Tasks.Task"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="task"/> reference is <see langword="null"/>.</exception>
            <returns>An <see cref="T:UnityFx.Async.IAsyncOperation"/> that represents the source <paramref name="task"/>.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromTask``1(System.Threading.Tasks.Task{``0})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromTask``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Creates an <see cref="T:UnityFx.Async.IAsyncOperation`1"/> instance that completes when the specified <paramref name="task"/> completes.
            </summary>
            <param name="task">The source <see cref="T:System.Threading.Tasks.Task`1"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="task"/> reference is <see langword="null"/>.</exception>
            <returns>An <see cref="T:UnityFx.Async.IAsyncOperation"/> that represents the source <paramref name="task"/>.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromTask(System.Threading.Tasks.Task)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromAction(System.Action,System.Threading.CancellationToken)">
            <summary>
            Creates a completed <see cref="T:UnityFx.Async.IAsyncOperation"/> that represents result of the <paramref name="action"/> specified.
            </summary>
            <param name="action">The delegate to execute.</param>
            <param name="cancellationToken">A cancellation token to check before executing the <paramref name="action"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>A completed operation that represents <paramref name="action"/> result.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromAction(System.Action)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromAction``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Creates a completed <see cref="T:UnityFx.Async.IAsyncOperation`1"/> that represents result of the <paramref name="action"/> specified.
            </summary>
            <param name="action">The delegate to execute.</param>
            <param name="cancellationToken">A cancellation token to check before executing the <paramref name="action"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>A completed operation that represents <paramref name="action"/> result.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.FromAction``1(System.Func{``0})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromObservable``1(System.IObservable{``0})">
            <summary>
            Creates a <see cref="T:UnityFx.Async.IAsyncOperation`1"/> instance that can be used to track the source observable.
            </summary>
            <typeparam name="T">Type of the operation result.</typeparam>
            <param name="observable">The source observable.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="observable"/> reference is <see langword="null"/>.</exception>
            <returns>Returns an <see cref="T:UnityFx.Async.IAsyncOperation`1"/> instance that can be used to track the observable.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Delay(System.Int32)">
            <summary>
            Creates an operation that completes after a time delay.
            </summary>
            <param name="millisecondsDelay">The number of milliseconds to wait before completing the returned operation, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="millisecondsDelay"/> is less than -1.</exception>
            <returns>An operation that represents the time delay.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Delay(System.Int32,UnityFx.Async.IAsyncUpdateSource)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.Delay(System.Single)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.Delay(System.TimeSpan)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Delay(System.Int32,UnityFx.Async.IAsyncUpdateSource)">
            <summary>
            Creates an operation that completes after a time delay. This method creates a more effecient operation
            than <see cref="M:UnityFx.Async.AsyncResult.Delay(System.Int32)"/> but requires a specialized update source.
            </summary>
            <param name="millisecondsDelay">The number of milliseconds to wait before completing the returned operation, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <param name="updateSource">Update notifications provider.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="updateSource"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="millisecondsDelay"/> is less than -1.</exception>
            <returns>An operation that represents the time delay.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Delay(System.Int32)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.Delay(System.Single,UnityFx.Async.IAsyncUpdateSource)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.Delay(System.TimeSpan,UnityFx.Async.IAsyncUpdateSource)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Delay(System.Single)">
            <summary>
            Creates an operation that completes after a specified time interval.
            </summary>
            <param name="secondsDelay">The number of seconds to wait before completing the returned operation, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="secondsDelay"/> represents a negative time interval.</exception>
            <returns>An operation that represents the time delay.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Delay(System.Single,UnityFx.Async.IAsyncUpdateSource)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.Delay(System.Int32)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.Delay(System.TimeSpan)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Delay(System.Single,UnityFx.Async.IAsyncUpdateSource)">
            <summary>
            Creates an operation that completes after a specified time interval. This method creates a more effecient operation
            than <see cref="M:UnityFx.Async.AsyncResult.Delay(System.Single)"/> but requires a specialized update source.
            </summary>
            <param name="secondsDelay">The number of seconds to wait before completing the returned operation, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <param name="updateSource">Update notifications provider.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="updateSource"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="secondsDelay"/> represents a negative time interval other than <c>TimeSpan.FromMillseconds(-1)</c>.</exception>
            <returns>An operation that represents the time delay.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Delay(System.Single)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.Delay(System.Int32,UnityFx.Async.IAsyncUpdateSource)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.Delay(System.TimeSpan,UnityFx.Async.IAsyncUpdateSource)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Delay(System.TimeSpan)">
            <summary>
            Creates an operation that completes after a specified time interval.
            </summary>
            <param name="delay">The time span to wait before completing the returned operation, or <c>TimeSpan.FromMilliseconds(-1)</c> to wait indefinitely.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="delay"/> represents a negative time interval other than <c>TimeSpan.FromMillseconds(-1)</c>.</exception>
            <returns>An operation that represents the time delay.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Delay(System.TimeSpan,UnityFx.Async.IAsyncUpdateSource)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.Delay(System.Int32)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.Delay(System.Single)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Delay(System.TimeSpan,UnityFx.Async.IAsyncUpdateSource)">
            <summary>
            Creates an operation that completes after a specified time interval. This method creates a more effecient operation
            than <see cref="M:UnityFx.Async.AsyncResult.Delay(System.TimeSpan)"/> but requires a specialized update source.
            </summary>
            <param name="delay">The time span to wait before completing the returned operation, or <c>TimeSpan.FromMilliseconds(-1)</c> to wait indefinitely.</param>
            <param name="updateSource">Update notifications provider.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="updateSource"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="delay"/> represents a negative time interval other than <c>TimeSpan.FromMillseconds(-1)</c>.</exception>
            <returns>An operation that represents the time delay.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Delay(System.TimeSpan)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.Delay(System.Int32,UnityFx.Async.IAsyncUpdateSource)"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.Delay(System.Single,UnityFx.Async.IAsyncUpdateSource)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Retry(System.Func{UnityFx.Async.IAsyncOperation},System.Int32)">
            <summary>
            Creates an operation that completes when the source operation is completed successfully.
            </summary>
            <param name="opFactory">A delegate that initiates the source operation.</param>
            <param name="millisecondsRetryDelay">The number of milliseconds to wait after a failed try before starting a new operation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="opFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="millisecondsRetryDelay"/> is less than zero.</exception>
            <returns>An operation that represents the retry process.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Retry(System.Func{UnityFx.Async.IAsyncOperation},System.TimeSpan,System.Int32)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Retry(System.Func{UnityFx.Async.IAsyncOperation},System.Int32,UnityFx.Async.IAsyncUpdateSource)">
            <summary>
            Creates an operation that completes when the source operation is completed successfully.
            </summary>
            <param name="opFactory">A delegate that initiates the source operation.</param>
            <param name="millisecondsRetryDelay">The number of milliseconds to wait after a failed try before starting a new operation.</param>
            <param name="updateSource">Update notifications provider.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="opFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="millisecondsRetryDelay"/> is less than zero.</exception>
            <returns>An operation that represents the retry process.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Retry(System.Func{UnityFx.Async.IAsyncOperation},System.TimeSpan,System.Int32,UnityFx.Async.IAsyncUpdateSource)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Retry(System.Func{UnityFx.Async.IAsyncOperation},System.Int32,System.Int32)">
            <summary>
            Creates an operation that completes when the source operation is completed successfully or maximum number of retries exceeded.
            </summary>
            <param name="opFactory">A delegate that initiates the source operation.</param>
            <param name="millisecondsRetryDelay">The number of milliseconds to wait after a failed try before starting a new operation.</param>
            <param name="maxRetryCount">Maximum number of retries. Zero means no limits.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="opFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="millisecondsRetryDelay"/> or <paramref name="maxRetryCount"/> is less than zero.</exception>
            <returns>An operation that represents the retry process.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Retry(System.Func{UnityFx.Async.IAsyncOperation},System.TimeSpan,System.Int32)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Retry(System.Func{UnityFx.Async.IAsyncOperation},System.Int32,System.Int32,UnityFx.Async.IAsyncUpdateSource)">
            <summary>
            Creates an operation that completes when the source operation is completed successfully or maximum number of retries exceeded.
            </summary>
            <param name="opFactory">A delegate that initiates the source operation.</param>
            <param name="millisecondsRetryDelay">The number of milliseconds to wait after a failed try before starting a new operation.</param>
            <param name="maxRetryCount">Maximum number of retries. Zero means no limits.</param>
            <param name="updateSource">Update notifications provider.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="opFactory"/> or <paramref name="updateSource"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="millisecondsRetryDelay"/> or <paramref name="maxRetryCount"/> is less than zero.</exception>
            <returns>An operation that represents the retry process.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Retry(System.Func{UnityFx.Async.IAsyncOperation},System.TimeSpan,System.Int32,UnityFx.Async.IAsyncUpdateSource)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Retry(System.Func{UnityFx.Async.IAsyncOperation},System.TimeSpan)">
            <summary>
            Creates an operation that completes when the source operation is completed successfully.
            </summary>
            <param name="opFactory">A delegate that initiates the source operation.</param>
            <param name="retryDelay">The time to wait after a failed try before starting a new operation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="opFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="retryDelay"/> is less than zero.</exception>
            <returns>An operation that represents the retry process.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Retry(System.Func{UnityFx.Async.IAsyncOperation},System.Int32,System.Int32)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Retry(System.Func{UnityFx.Async.IAsyncOperation},System.TimeSpan,UnityFx.Async.IAsyncUpdateSource)">
            <summary>
            Creates an operation that completes when the source operation is completed successfully.
            </summary>
            <param name="opFactory">A delegate that initiates the source operation.</param>
            <param name="retryDelay">The time to wait after a failed try before starting a new operation.</param>
            <param name="updateSource">Update notifications provider.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="opFactory"/> or <paramref name="updateSource"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="retryDelay"/> is less than zero.</exception>
            <returns>An operation that represents the retry process.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Retry(System.Func{UnityFx.Async.IAsyncOperation},System.Int32,System.Int32,UnityFx.Async.IAsyncUpdateSource)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Retry(System.Func{UnityFx.Async.IAsyncOperation},System.TimeSpan,System.Int32)">
            <summary>
            Creates an operation that completes when the source operation is completed successfully or maximum number of retries exceeded.
            </summary>
            <param name="opFactory">A delegate that initiates the source operation.</param>
            <param name="retryDelay">The time to wait after a failed try before starting a new operation.</param>
            <param name="maxRetryCount">Maximum number of retries. Zero means no limits.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="opFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="retryDelay"/> or <paramref name="maxRetryCount"/> is less than zero.</exception>
            <returns>An operation that represents the retry process.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Retry(System.Func{UnityFx.Async.IAsyncOperation},System.Int32,System.Int32)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Retry(System.Func{UnityFx.Async.IAsyncOperation},System.TimeSpan,System.Int32,UnityFx.Async.IAsyncUpdateSource)">
            <summary>
            Creates an operation that completes when the source operation is completed successfully or maximum number of retries exceeded.
            </summary>
            <param name="opFactory">A delegate that initiates the source operation.</param>
            <param name="retryDelay">The time to wait after a failed try before starting a new operation.</param>
            <param name="maxRetryCount">Maximum number of retries. Zero means no limits.</param>
            <param name="updateSource">Update notifications provider.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="opFactory"/> or <paramref name="updateSource"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="retryDelay"/> or <paramref name="maxRetryCount"/> is less than zero.</exception>
            <returns>An operation that represents the retry process.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Retry(System.Func{UnityFx.Async.IAsyncOperation},System.Int32,System.Int32,UnityFx.Async.IAsyncUpdateSource)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Retry``1(System.Func{UnityFx.Async.IAsyncOperation{``0}},System.Int32)">
            <summary>
            Creates an operation that completes when the source operation is completed successfully.
            </summary>
            <param name="opFactory">A delegate that initiates the source operation.</param>
            <param name="millisecondsRetryDelay">The number of milliseconds to wait after a failed try before starting a new operation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="opFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="millisecondsRetryDelay"/> is less than zero.</exception>
            <returns>An operation that represents the retry process.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Retry``1(System.Func{UnityFx.Async.IAsyncOperation{``0}},System.TimeSpan,System.Int32)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Retry``1(System.Func{UnityFx.Async.IAsyncOperation{``0}},System.Int32,UnityFx.Async.IAsyncUpdateSource)">
            <summary>
            Creates an operation that completes when the source operation is completed successfully.
            </summary>
            <param name="opFactory">A delegate that initiates the source operation.</param>
            <param name="millisecondsRetryDelay">The number of milliseconds to wait after a failed try before starting a new operation.</param>
            <param name="updateSource">Update notifications provider.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="opFactory"/> or <paramref name="updateSource"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="millisecondsRetryDelay"/> is less than zero.</exception>
            <returns>An operation that represents the retry process.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Retry``1(System.Func{UnityFx.Async.IAsyncOperation{``0}},System.TimeSpan,System.Int32,UnityFx.Async.IAsyncUpdateSource)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Retry``1(System.Func{UnityFx.Async.IAsyncOperation{``0}},System.Int32,System.Int32)">
            <summary>
            Creates an operation that completes when the source operation is completed successfully or maximum number of retries exceeded.
            </summary>
            <param name="opFactory">A delegate that initiates the source operation.</param>
            <param name="millisecondsRetryDelay">The number of milliseconds to wait after a failed try before starting a new operation.</param>
            <param name="maxRetryCount">Maximum number of retries. Zero means no limits.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="opFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="millisecondsRetryDelay"/> or <paramref name="maxRetryCount"/> is less than zero.</exception>
            <returns>An operation that represents the retry process.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Retry``1(System.Func{UnityFx.Async.IAsyncOperation{``0}},System.TimeSpan,System.Int32)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Retry``1(System.Func{UnityFx.Async.IAsyncOperation{``0}},System.Int32,System.Int32,UnityFx.Async.IAsyncUpdateSource)">
            <summary>
            Creates an operation that completes when the source operation is completed successfully or maximum number of retries exceeded.
            </summary>
            <param name="opFactory">A delegate that initiates the source operation.</param>
            <param name="millisecondsRetryDelay">The number of milliseconds to wait after a failed try before starting a new operation.</param>
            <param name="maxRetryCount">Maximum number of retries. Zero means no limits.</param>
            <param name="updateSource">Update notifications provider.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="opFactory"/> or <paramref name="updateSource"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="millisecondsRetryDelay"/> or <paramref name="maxRetryCount"/> is less than zero.</exception>
            <returns>An operation that represents the retry process.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Retry``1(System.Func{UnityFx.Async.IAsyncOperation{``0}},System.TimeSpan,System.Int32,UnityFx.Async.IAsyncUpdateSource)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Retry``1(System.Func{UnityFx.Async.IAsyncOperation{``0}},System.TimeSpan)">
            <summary>
            Creates an operation that completes when the source operation is completed successfully.
            </summary>
            <param name="opFactory">A delegate that initiates the source operation.</param>
            <param name="retryDelay">The time to wait after a failed try before starting a new operation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="opFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="retryDelay"/> is less than zero.</exception>
            <returns>An operation that represents the retry process.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Retry``1(System.Func{UnityFx.Async.IAsyncOperation{``0}},System.Int32,System.Int32)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Retry``1(System.Func{UnityFx.Async.IAsyncOperation{``0}},System.TimeSpan,UnityFx.Async.IAsyncUpdateSource)">
            <summary>
            Creates an operation that completes when the source operation is completed successfully.
            </summary>
            <param name="opFactory">A delegate that initiates the source operation.</param>
            <param name="retryDelay">The time to wait after a failed try before starting a new operation.</param>
            <param name="updateSource">Update notifications provider.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="opFactory"/> or <paramref name="updateSource"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="retryDelay"/> is less than zero.</exception>
            <returns>An operation that represents the retry process.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Retry``1(System.Func{UnityFx.Async.IAsyncOperation{``0}},System.Int32,System.Int32,UnityFx.Async.IAsyncUpdateSource)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Retry``1(System.Func{UnityFx.Async.IAsyncOperation{``0}},System.TimeSpan,System.Int32)">
            <summary>
            Creates an operation that completes when the source operation is completed successfully or maximum number of retries exceeded.
            </summary>
            <param name="opFactory">A delegate that initiates the source operation.</param>
            <param name="retryDelay">The time to wait after a failed try before starting a new operation.</param>
            <param name="maxRetryCount">Maximum number of retries. Zero means no limits.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="opFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="retryDelay"/> or <paramref name="maxRetryCount"/> is less than zero.</exception>
            <returns>An operation that represents the retry process.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Retry``1(System.Func{UnityFx.Async.IAsyncOperation{``0}},System.Int32,System.Int32)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Retry``1(System.Func{UnityFx.Async.IAsyncOperation{``0}},System.TimeSpan,System.Int32,UnityFx.Async.IAsyncUpdateSource)">
            <summary>
            Creates an operation that completes when the source operation is completed successfully or maximum number of retries exceeded.
            </summary>
            <param name="opFactory">A delegate that initiates the source operation.</param>
            <param name="retryDelay">The time to wait after a failed try before starting a new operation.</param>
            <param name="maxRetryCount">Maximum number of retries. Zero means no limits.</param>
            <param name="updateSource">Update notifications provider.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="opFactory"/> or <paramref name="updateSource"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="retryDelay"/> or <paramref name="maxRetryCount"/> is less than zero.</exception>
            <returns>An operation that represents the retry process.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult.Retry``1(System.Func{UnityFx.Async.IAsyncOperation{``0}},System.Int32,System.Int32,UnityFx.Async.IAsyncUpdateSource)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.WhenAll(System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation})">
            <summary>
            Creates an operation that will complete when all of the specified objects in an enumerable collection have completed.
            </summary>
            <param name="ops">The operations to wait on for completion.</param>
            <returns>An operation that represents the completion of all of the supplied operations.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="ops"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="ops"/> collection contained a <see langword="null"/> operation..</exception>
            <seealso cref="M:UnityFx.Async.AsyncResult.WhenAll``1(System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation{``0}})"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.WhenAll(UnityFx.Async.IAsyncOperation[])"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.WhenAll``1(System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation{``0}})">
            <summary>
            Creates an operation that will complete when all of the specified objects in an enumerable collection have completed.
            </summary>
            <param name="ops">The operations to wait on for completion.</param>
            <returns>An operation that represents the completion of all of the supplied operations.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="ops"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="ops"/> collection contained a <see langword="null"/> operation..</exception>
            <seealso cref="M:UnityFx.Async.AsyncResult.WhenAll(System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation})"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.WhenAll``1(UnityFx.Async.IAsyncOperation{``0}[])"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.WhenAll(UnityFx.Async.IAsyncOperation[])">
            <summary>
            Creates an operation that will complete when all of the specified objects in an array have completed.
            </summary>
            <param name="ops">The operations to wait on for completion.</param>
            <returns>An operation that represents the completion of all of the supplied operations.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="ops"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="ops"/> collection contained a <see langword="null"/> operation..</exception>
            <seealso cref="M:UnityFx.Async.AsyncResult.WhenAll``1(UnityFx.Async.IAsyncOperation{``0}[])"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.WhenAll(System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.WhenAll``1(UnityFx.Async.IAsyncOperation{``0}[])">
            <summary>
            Creates an operation that will complete when all of the specified objects in an array have completed.
            </summary>
            <param name="ops">The operations to wait on for completion.</param>
            <returns>An operation that represents the completion of all of the supplied operations.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="ops"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="ops"/> collection contained a <see langword="null"/> operation.</exception>
            <seealso cref="M:UnityFx.Async.AsyncResult.WhenAll(UnityFx.Async.IAsyncOperation[])"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.WhenAll``1(System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation{``0}})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.WhenAny``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates an operation that will complete when any of the specified objects in an enumerable collection have completed.
            </summary>
            <param name="ops">The operations to wait on for completion.</param>
            <returns>An operation that represents the completion of any of the supplied operations.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="ops"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="ops"/> collection contained a <see langword="null"/> operation..</exception>
            <seealso cref="M:UnityFx.Async.AsyncResult.WhenAny``1(``0[])"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.WhenAny``1(``0[])">
            <summary>
            Creates an operation that will complete when any of the specified objects in an array have completed.
            </summary>
            <param name="ops">The operations to wait on for completion.</param>
            <returns>An operation that represents the completion of any of the supplied operations.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="ops"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="ops"/> collection contained a <see langword="null"/> operation..</exception>
            <seealso cref="M:UnityFx.Async.AsyncResult.WhenAny``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="T:UnityFx.Async.AsyncResult`1">
            <summary>
            A lightweight net35-compatible asynchronous operation that can return a value.
            </summary>
            <typeparam name="TResult">Type of the operation result value.</typeparam>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:UnityFx.Async.AsyncCompletionSource`1"/>
            <seealso cref="T:UnityFx.Async.AsyncResult"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult`1"/> class.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult`1"/> class.
            </summary>
            <param name="asyncCallback">User-defined completion callback.</param>
            <param name="asyncState">User-defined data to assosiate with the operation.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.#ctor(UnityFx.Async.AsyncCreationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult`1"/> class.
            </summary>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.#ctor(UnityFx.Async.AsyncCreationOptions,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult`1"/> class.
            </summary>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
            <param name="asyncState">User-defined data to assosiate with the operation.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.#ctor(UnityFx.Async.AsyncCreationOptions,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult`1"/> class.
            </summary>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
            <param name="asyncCallback">User-defined completion callback.</param>
            <param name="asyncState">User-defined data to assosiate with the operation.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.#ctor(UnityFx.Async.AsyncOperationStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult`1"/> class.
            </summary>
            <param name="status">Status value of the operation.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.#ctor(UnityFx.Async.AsyncOperationStatus,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult`1"/> class.
            </summary>
            <param name="status">Status value of the operation.</param>
            <param name="asyncState">User-defined data to assosiate with the operation.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.#ctor(UnityFx.Async.AsyncOperationStatus,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult`1"/> class.
            </summary>
            <param name="status">Status value of the operation.</param>
            <param name="asyncCallback">User-defined completion callback.</param>
            <param name="asyncState">User-defined data to assosiate with the operation.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.#ctor(UnityFx.Async.AsyncOperationStatus,UnityFx.Async.AsyncCreationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult`1"/> class.
            </summary>
            <param name="status">Status value of the operation.</param>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.#ctor(UnityFx.Async.AsyncOperationStatus,UnityFx.Async.AsyncCreationOptions,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult`1"/> class.
            </summary>
            <param name="status">Status value of the operation.</param>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
            <param name="asyncState">User-defined data to assosiate with the operation.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.#ctor(UnityFx.Async.AsyncOperationStatus,UnityFx.Async.AsyncCreationOptions,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult`1"/> class.
            </summary>
            <param name="status">Status value of the operation.</param>
            <param name="options">The <see cref="T:UnityFx.Async.AsyncCreationOptions"/> used to customize the operation's behavior.</param>
            <param name="asyncCallback">User-defined completion callback.</param>
            <param name="asyncState">User-defined data to assosiate with the operation.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.#ctor(System.Exception,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult`1"/> class. For internal use only.
            </summary>
            <param name="exception">The exception to complete the operation with.</param>
            <param name="asyncState">User-defined data to assosiate with the operation.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.#ctor(`0,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult`1"/> class. For internal use only.
            </summary>
            <param name="result">Result value.</param>
            <param name="asyncState">User-defined data to assosiate with the operation.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.TrySetResult(`0)">
            <summary>
            Attempts to transition the operation into the <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> state.
            </summary>
            <param name="result">The operation result.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult`1.TrySetResult(`0,System.Boolean)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.TrySetResult(`0,System.Boolean)">
            <summary>
            Attempts to transition the operation into the <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> state.
            </summary>
            <param name="result">The operation result.</param>
            <param name="completedSynchronously">Value of the <see cref="P:System.IAsyncResult.CompletedSynchronously"/> property.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.AsyncResult`1.TrySetResult(`0)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.CopyCompletionState(UnityFx.Async.IAsyncOperation,System.Boolean)">
            <summary>
            Copies state of the specified operation.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.CopyCompletionState(UnityFx.Async.IAsyncOperation{`0},System.Boolean)">
            <summary>
            Copies state of the specified operation.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.TryCopyCompletionState(UnityFx.Async.IAsyncOperation,System.Boolean)">
            <summary>
            Attemts to copy state of the specified operation.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.TryCopyCompletionState(UnityFx.Async.IAsyncOperation{`0},System.Boolean)">
            <summary>
            Attemts to copy state of the specified operation.
            </summary>
        </member>
        <member name="P:UnityFx.Async.AsyncResult`1.Result">
            <summary>
            Gets the operation result value.
            </summary>
            <value>Result of the operation.</value>
            <exception cref="T:System.InvalidOperationException">Thrown if the property is accessed before operation is completed.</exception>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.Subscribe(System.IObserver{`0})">
            <summary>
            Notifies the provider that an observer is to receive notifications.
            </summary>
            <param name="observer">The object that is to receive notifications.</param>
            <returns>A reference to an interface that allows observers to stop receiving notifications before the provider has finished sending them.</returns>
        </member>
        <member name="T:UnityFx.Async.AsyncUpdateSource">
            <summary>
            Implementation of <see cref="T:UnityFx.Async.IAsyncUpdateSource"/>.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncUpdateSource.AddListener(System.Action{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncUpdateSource.RemoveListener(System.Action{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncUpdateSource.AddListener(UnityFx.Async.IAsyncUpdatable)">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncUpdateSource.RemoveListener(UnityFx.Async.IAsyncUpdatable)">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncUpdateSource.Subscribe(System.IObserver{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncUpdateSource.OnNext(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncUpdateSource.OnCompleted">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncUpdateSource.OnError(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncUpdateSource.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:UnityFx.Async.CompilerServices.AsyncAwaitable">
            <summary>
            Provides an awaitable object that allows for configured awaits on <see cref="T:UnityFx.Async.IAsyncOperation"/>.
            This type is intended for compiler use only.
            </summary>
            <seealso cref="T:UnityFx.Async.IAsyncOperation"/>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncAwaitable.#ctor(UnityFx.Async.IAsyncOperation,System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.CompilerServices.AsyncAwaitable"/> struct.
            </summary>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncAwaitable.GetAwaiter">
            <summary>
            Returns the awaiter.
            </summary>
        </member>
        <member name="T:UnityFx.Async.CompilerServices.AsyncAwaitable`1">
            <summary>
            Provides an awaitable object that allows for configured awaits on <see cref="T:UnityFx.Async.IAsyncOperation`1"/>.
            This type is intended for compiler use only.
            </summary>
            <seealso cref="T:UnityFx.Async.IAsyncOperation"/>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncAwaitable`1.#ctor(UnityFx.Async.IAsyncOperation{`0},System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.CompilerServices.AsyncAwaitable`1"/> struct.
            </summary>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncAwaitable`1.GetAwaiter">
            <summary>
            Returns the awaiter.
            </summary>
        </member>
        <member name="T:UnityFx.Async.CompilerServices.AsyncAwaiter">
            <summary>
            Provides an object that waits for the completion of an asynchronous operation. This type and its members are intended for compiler use only.
            </summary>
            <seealso cref="T:UnityFx.Async.IAsyncOperation"/>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncAwaiter.#ctor(UnityFx.Async.IAsyncOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.CompilerServices.AsyncAwaiter"/> struct.
            </summary>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncAwaiter.#ctor(UnityFx.Async.IAsyncOperation,System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.CompilerServices.AsyncAwaiter"/> struct.
            </summary>
        </member>
        <member name="P:UnityFx.Async.CompilerServices.AsyncAwaiter.IsCompleted">
            <summary>
            Gets a value indicating whether the underlying operation is completed.
            </summary>
            <value>The operation completion flag.</value>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncAwaiter.GetResult">
            <summary>
            Returns the source result value.
            </summary>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncAwaiter.OnCompleted(System.Action)">
            <inheritdoc/>
        </member>
        <member name="T:UnityFx.Async.CompilerServices.AsyncAwaiter`1">
            <summary>
            Provides an object that waits for the completion of an asynchronous operation. This type and its members are intended for compiler use only.
            </summary>
            <seealso cref="T:UnityFx.Async.IAsyncOperation`1"/>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncAwaiter`1.#ctor(UnityFx.Async.IAsyncOperation{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.CompilerServices.AsyncAwaiter`1"/> struct.
            </summary>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncAwaiter`1.#ctor(UnityFx.Async.IAsyncOperation{`0},System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.CompilerServices.AsyncAwaiter`1"/> struct.
            </summary>
        </member>
        <member name="P:UnityFx.Async.CompilerServices.AsyncAwaiter`1.IsCompleted">
            <summary>
            Gets a value indicating whether the underlying operation is completed.
            </summary>
            <value>The operation completion flag.</value>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncAwaiter`1.GetResult">
            <summary>
            Returns the source result value.
            </summary>
            <returns>Returns the underlying operation result.</returns>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncAwaiter`1.OnCompleted(System.Action)">
            <inheritdoc/>
        </member>
        <member name="T:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder">
            <summary>
            Provides a builder for asynchronous methods that return <see cref="T:UnityFx.Async.AsyncResult"/>. This type is intended for compiler use only.
            </summary>
            <remarks>
            <see cref="T:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder"/> is a value type, and thus it is copied by value. Prior to being copied,
            one of its <see cref="P:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder.Task"/>, <see cref="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder.SetResult"/>, or <see cref="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder.SetException(System.Exception)"/> members must be accessed,
            or else the copies may end up building distinct <see cref="T:UnityFx.Async.AsyncResult"/> instances.
            </remarks>
            <seealso cref="T:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder`1"/>
        </member>
        <member name="P:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder.Task">
            <summary>
            Gets the <see cref="T:UnityFx.Async.AsyncResult"/> for this builder.
            </summary>
            <value>The <see cref="T:UnityFx.Async.AsyncResult"/> representing the builder's asynchronous operation.</value>
            <exception cref="T:System.InvalidOperationException">The builder is not initialized.</exception>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder.SetResult">
            <summary>
            Completes the <see cref="T:UnityFx.Async.AsyncResult"/> in the <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> state.
            </summary>
            <exception cref="T:System.InvalidOperationException">The builder is not initialized.</exception>
            <exception cref="T:System.InvalidOperationException">The operation has already completed.</exception>
            <seealso cref="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder.SetException(System.Exception)"/>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder.SetException(System.Exception)">
            <summary>
            Completes the <see cref="T:UnityFx.Async.AsyncResult"/> in the <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> state with the specified <paramref name="exception"/>.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> to use to fault the operation.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The builder is not initialized.</exception>
            <exception cref="T:System.InvalidOperationException">The operation has already completed.</exception>
            <seealso cref="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder.SetResult"/>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder.Start``1(``0@)">
            <summary>
            Initiates the builder's execution with the associated state machine.
            </summary>
            <typeparam name="TStateMachine">Specifies the type of the state machine.</typeparam>
            <param name="stateMachine">The state machine instance, passed by reference.</param>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            Associates the builder with the state machine it represents.
            </summary>
            <param name="stateMachine">The heap-allocated state machine object.</param>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the specified state machine to be pushed forward when the specified awaiter completes.
            </summary>
            <typeparam name="TAwaiter">Specifies the type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">Specifies the type of the state machine.</typeparam>
            <param name="awaiter">The awaiter passed by reference.</param>
            <param name="stateMachine">The state machine passed by reference.</param>
            <seealso cref="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)"/>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the specified state machine to be pushed forward when the specified awaiter completes.
            </summary>
            <typeparam name="TAwaiter">Specifies the type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">Specifies the type of the state machine.</typeparam>
            <param name="awaiter">The awaiter passed by reference.</param>
            <param name="stateMachine">The state machine passed by reference.</param>
            <seealso cref="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder.AwaitOnCompleted``2(``0@,``1@)"/>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder.Create">
            <summary>
            Initializes a new <see cref="T:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder"/>.
            </summary>
            <returns>The initialized <see cref="T:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder"/>.</returns>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder.OnFirstAwait``1(``0@)">
            <summary>
            First await handler. Boxes the <paramref name="stateMachine"/> and initializes continuation action.
            </summary>
            <typeparam name="TStateMachine">Type of the state machine instance.</typeparam>
            <param name="stateMachine">The parent state machine.</param>
        </member>
        <member name="T:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder`1">
            <summary>
            Provides a builder for asynchronous methods that return <see cref="T:UnityFx.Async.AsyncResult`1"/>. This type is intended for compiler use only.
            </summary>
            <remarks>
            <see cref="T:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder`1"/> is a value type, and thus it is copied by value. Prior to being copied,
            one of its <see cref="P:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder`1.Task"/>, <see cref="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder`1.SetResult(`0)"/>, or <see cref="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder`1.SetException(System.Exception)"/> members must be accessed,
            or else the copies may end up building distinct <see cref="T:UnityFx.Async.AsyncResult`1"/> instances.
            </remarks>
            <seealso cref="T:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder"/>
        </member>
        <member name="P:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder`1.Task">
            <summary>
            Gets the <see cref="T:UnityFx.Async.AsyncResult`1"/> for this builder.
            </summary>
            <value>The <see cref="T:UnityFx.Async.AsyncResult`1"/> representing the builder's asynchronous operation.</value>
            <exception cref="T:System.InvalidOperationException">The builder is not initialized.</exception>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder`1.SetResult(`0)">
            <summary>
            Completes the <see cref="T:UnityFx.Async.AsyncResult`1"/> in the <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> state.
            </summary>
            <param name="result">The result to use to complete the operation.</param>
            <exception cref="T:System.InvalidOperationException">The builder is not initialized.</exception>
            <exception cref="T:System.InvalidOperationException">The operation has already completed.</exception>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder`1.SetException(System.Exception)">
            <summary>
            Completes the <see cref="T:UnityFx.Async.AsyncResult`1"/> in the <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> state with the specified <paramref name="exception"/>.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> to use to fault the operation.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The builder is not initialized.</exception>
            <exception cref="T:System.InvalidOperationException">The operation has already completed.</exception>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder`1.Start``1(``0@)">
            <summary>
            Initiates the builder's execution with the associated state machine.
            </summary>
            <typeparam name="TStateMachine">Specifies the type of the state machine.</typeparam>
            <param name="stateMachine">The state machine instance, passed by reference.</param>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            Associates the builder with the state machine it represents.
            </summary>
            <param name="stateMachine">The heap-allocated state machine object.</param>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the specified state machine to be pushed forward when the specified awaiter completes.
            </summary>
            <typeparam name="TAwaiter">Specifies the type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">Specifies the type of the state machine.</typeparam>
            <param name="awaiter">The awaiter passed by reference.</param>
            <param name="stateMachine">The state machine passed by reference.</param>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the specified state machine to be pushed forward when the specified awaiter completes.
            </summary>
            <typeparam name="TAwaiter">Specifies the type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">Specifies the type of the state machine.</typeparam>
            <param name="awaiter">The awaiter passed by reference.</param>
            <param name="stateMachine">The state machine passed by reference.</param>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder`1.Create">
            <summary>
            Initializes a new <see cref="T:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder`1"/>.
            </summary>
            <returns>The initialized <see cref="T:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder`1"/>.</returns>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder`1.OnFirstAwait``1(``0@)">
            <summary>
            First await handler. Boxes the <paramref name="stateMachine"/> and initializes continuation action.
            </summary>
            <typeparam name="TStateMachine">Type of the state machine instance.</typeparam>
            <param name="stateMachine">The parent state machine.</param>
        </member>
        <member name="M:UnityFx.Async.CompilerServices.AsyncResultMethodBuilder`1.GetTaskForResult(`0)">
            <summary>
            Gets a task matching the result value specified.
            </summary>
            <param name="result">The result value.</param>
            <returns>The completed task.</returns>
        </member>
        <member name="T:UnityFx.Async.Extensions.IAsyncResultExtensions">
            <summary>
            Extension methods for <see cref="T:System.IAsyncResult"/>.
            </summary>
        </member>
        <member name="M:UnityFx.Async.Extensions.IAsyncResultExtensions.ToEnum(System.IAsyncResult)">
            <summary>
            Creates an <see cref="T:System.Collections.IEnumerator"/> that completes when the specified operation completes.
            </summary>
            <param name="op">The operation to convert to enumerator.</param>
            <returns>An enumerator that represents the operation.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.IAsyncResultExtensions.SpinUntilCompleted(System.IAsyncResult)">
            <summary>
            Spins until the operation has completed.
            </summary>
            <param name="op">The operation to wait for.</param>
        </member>
        <member name="M:UnityFx.Async.Extensions.IAsyncResultExtensions.SpinUntilCompleted(System.IAsyncResult,System.Int32)">
            <summary>
            Spins until the operation has completed within a specified timeout.
            </summary>
            <param name="op">The operation to wait for.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a negative number other than -1.</exception>
            <returns>Returns <see langword="true"/> if the operation was completed within the specified time interfval; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.IAsyncResultExtensions.SpinUntilCompleted(System.IAsyncResult,System.TimeSpan)">
            <summary>
            Spins until the operation has completed within a specified timeout.
            </summary>
            <param name="op">The operation to wait for.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative number other than -1 milliseconds, or <paramref name="timeout"/> is greater than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <returns>Returns <see langword="true"/> if the operation was completed within the specified time interfval; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.IAsyncResultExtensions.SpinUntilCompleted(System.IAsyncResult,System.Threading.CancellationToken)">
            <summary>
            Spins until the operation has completed or until canceled.
            </summary>
            <param name="op">The operation to wait for.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel wait operation.</param>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
            <seealso cref="M:UnityFx.Async.Extensions.IAsyncResultExtensions.SpinUntilCompleted(System.IAsyncResult)"/>
        </member>
        <member name="M:UnityFx.Async.Extensions.IAsyncResultExtensions.SpinUntilCompleted(System.IAsyncResult,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Spins until the operation has completed within a specified timeout or until canceled.
            </summary>
            <param name="op">The operation to wait for.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel wait operation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a negative number other than -1.</exception>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
            <returns>Returns <see langword="true"/> if the operation was completed within the specified time interfval; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.IAsyncResultExtensions.SpinUntilCompleted(System.IAsyncResult,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Spins until the operation has completed within a specified timeout or until canceled.
            </summary>
            <param name="op">The operation to wait for.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel wait operation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative number other than -1 milliseconds, or <paramref name="timeout"/> is greater than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
            <returns>Returns <see langword="true"/> if the operation was completed within the specified time interfval; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:UnityFx.Async.Extensions.IObservableExtensions">
            <summary>
            Extension methods for <see cref="T:System.IObservable`1"/>.
            </summary>
        </member>
        <member name="M:UnityFx.Async.Extensions.IObservableExtensions.ToAsync``1(System.IObservable{``0})">
            <summary>
            Creates a <see cref="T:UnityFx.Async.IAsyncOperation`1"/> instance that can be used to track the source observable.
            </summary>
            <typeparam name="T">Type of the operation result.</typeparam>
            <param name="observable">The source observable.</param>
            <returns>Returns an <see cref="T:UnityFx.Async.IAsyncOperation`1"/> instance that can be used to track the observable.</returns>
        </member>
        <member name="T:UnityFx.Async.Extensions.SocketExtensions">
            <summary>
            Extension methods for <see cref="T:System.Net.Sockets.Socket"/> class.
            </summary>
        </member>
        <member name="M:UnityFx.Async.Extensions.SocketExtensions.AcceptAsync(System.Net.Sockets.Socket,System.Net.Sockets.Socket,System.Int32)">
            <summary>
            Begins an asynchronous operation to accept an incoming connection attempt from a specified socket and
            receives the first block of data sent by the client application.
            </summary>
            <param name="socket">The target socket.</param>
            <param name="acceptSocket">The accepted <see cref="T:System.Net.Sockets.Socket"/> object. This value may be <see langword="null"/>.</param>
            <param name="receiveSize">The maximum number of bytes to receive.</param>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the <paramref name="socket"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the <paramref name="socket"/> has been closed.</exception>
            <returns>Returns <see cref="T:UnityFx.Async.IAsyncOperation`1"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.SocketExtensions.AcceptAsync(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            Begins an asynchronous operation to accept an incoming connection attempt and receives the first block of data
            sent by the client application.
            </summary>
            <param name="socket">The target socket.</param>
            <param name="receiveSize">The maximum number of bytes to receive.</param>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the <paramref name="socket"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the <paramref name="socket"/> has been closed.</exception>
            <returns>Returns <see cref="T:UnityFx.Async.IAsyncOperation`1"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.SocketExtensions.AcceptAsync(System.Net.Sockets.Socket)">
            <summary>
            Begins an asynchronous operation to accept an incoming connection attempt.
            </summary>
            <param name="socket">The target socket.</param>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the <paramref name="socket"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the <paramref name="socket"/> has been closed.</exception>
            <returns>Returns <see cref="T:UnityFx.Async.IAsyncOperation`1"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.SocketExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.EndPoint)">
            <summary>
            Begins an asynchronous request for a remote host connection.
            </summary>
            <param name="socket">The target socket.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/> that represents the remote host.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="remoteEP"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="socket"/> is listening.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the <paramref name="socket"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the <paramref name="socket"/> has been closed.</exception>
            <returns>Returns <see cref="T:UnityFx.Async.IAsyncOperation"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.SocketExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress,System.Int32)">
            <summary>
            Begins an asynchronous request for a remote host connection. The host is specified by an <see cref="T:System.Net.IPAddress"/> and a port number.
            </summary>
            <param name="socket">The target socket.</param>
            <param name="address">The <see cref="T:System.Net.IPAddress"/> of the remote host.</param>
            <param name="port">The port number of the remote host.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="address"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="port"/> number is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="socket"/> is listening.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the <paramref name="socket"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the <paramref name="socket"/> has been closed.</exception>
            <returns>Returns <see cref="T:UnityFx.Async.IAsyncOperation"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.SocketExtensions.ConnectAsync(System.Net.Sockets.Socket,System.String,System.Int32)">
            <summary>
            Begins an asynchronous request for a remote host connection. The host is specified by a host name and a port number.
            </summary>
            <param name="socket">The target socket.</param>
            <param name="host">The name of the remote host.</param>
            <param name="port">The port number of the remote host.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="host"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="port"/> number is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="socket"/> is listening.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the <paramref name="socket"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the <paramref name="socket"/> has been closed.</exception>
            <returns>Returns <see cref="T:UnityFx.Async.IAsyncOperation"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.SocketExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress[],System.Int32)">
            <summary>
            Begins an asynchronous request for a remote host connection. The host is specified by an <see cref="T:System.Net.IPAddress"/> array and a port number.
            </summary>
            <param name="socket">The target socket.</param>
            <param name="addresses">At least one <see cref="T:System.Net.IPAddress"/>, designating the remote host.</param>
            <param name="port">The port number of the remote host.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="addresses"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="port"/> number is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="socket"/> is listening.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the <paramref name="socket"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the <paramref name="socket"/> has been closed.</exception>
            <returns>Returns <see cref="T:UnityFx.Async.IAsyncOperation"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.SocketExtensions.DisconnectAsync(System.Net.Sockets.Socket,System.Boolean)">
            <summary>
            Begins an asynchronous request to disconnect from a remote endpoint.
            </summary>
            <param name="socket">The target socket.</param>
            <param name="reuseSocket"><see langword="true"/> if this socket can be reused after the connection is closed; otherwise, <see langword="false"/>.</param>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the <paramref name="socket"/>.</exception>
            <exception cref="T:System.NotSupportedException">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the <paramref name="socket"/> has been closed.</exception>
            <returns>Returns <see cref="T:UnityFx.Async.IAsyncOperation"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.SocketExtensions.SendAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            <param name="socket">The target socket.</param>
            <param name="buffers">An array of bytes that is the storage location for the received data.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="buffers"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the <paramref name="socket"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the <paramref name="socket"/> has been closed.</exception>
            <returns>Returns <see cref="T:UnityFx.Async.IAsyncOperation`1"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.SocketExtensions.SendAsync(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            <param name="socket">The target socket.</param>
            <param name="buffer">An array of bytes that contains the data to send.</param>
            <param name="offset">The zero-based position in the <paramref name="buffer"/> at which to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> is less than 0 or <paramref name="offset"/> is less
            than the length of <paramref name="buffer"/> or <paramref name="size"/> is less than 0 or <paramref name="size"/> is greater
            than the length of <paramref name="buffer"/> minus the value of the <paramref name="offset"/> parameter.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the <paramref name="socket"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the <paramref name="socket"/> has been closed.</exception>
            <returns>Returns <see cref="T:UnityFx.Async.IAsyncOperation`1"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.SocketExtensions.SendFileAsync(System.Net.Sockets.Socket,System.String)">
            <summary>
            Sends the file <paramref name="fileName"/> to a connected <see cref="T:System.Net.Sockets.Socket"/> object using the <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread"/> flag.
            </summary>
            <param name="socket">The target socket.</param>
            <param name="fileName">A string that contains the path and name of the file to send. This parameter can be <see langword="null"/>.</param>
            <exception cref="T:System.IO.FileNotFoundException">The file <paramref name="fileName"/> was not found.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the <paramref name="socket"/>.</exception>
            <exception cref="T:System.NotSupportedException">The operating system is not Windows NT or later or rhe <paramref name="socket"/> is not connected to a remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the <paramref name="socket"/> has been closed.</exception>
            <returns>Returns <see cref="T:UnityFx.Async.IAsyncOperation"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.SocketExtensions.SendFileAsync(System.Net.Sockets.Socket,System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions)">
            <summary>
            Sends the file <paramref name="fileName"/> to a connected <see cref="T:System.Net.Sockets.Socket"/> object.
            </summary>
            <param name="socket">The target socket.</param>
            <param name="fileName">A string that contains the path and name of the file to send. This parameter can be <see langword="null"/>.</param>
            <param name="preBuffer">A byte array that contains data to be sent before the file is sent. This parameter can be <see langword="null"/>.</param>
            <param name="postBuffer">A byte array that contains data to be sent after the file is sent. This parameter can be <see langword="null"/>.</param>
            <param name="flags">A bitwise combination of <see cref="T:System.Net.Sockets.TransmitFileOptions"/> values.</param>
            <exception cref="T:System.IO.FileNotFoundException">The file <paramref name="fileName"/> was not found.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the <paramref name="socket"/>.</exception>
            <exception cref="T:System.NotSupportedException">The operating system is not Windows NT or later or rhe <paramref name="socket"/> is not connected to a remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the <paramref name="socket"/> has been closed.</exception>
            <returns>Returns <see cref="T:UnityFx.Async.IAsyncOperation"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.SocketExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)">
            <summary>
            Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            <param name="socket">The target socket.</param>
            <param name="buffers">An array of bytes that is the storage location for the received data.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="buffers"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the <paramref name="socket"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the <paramref name="socket"/> has been closed.</exception>
            <returns>Returns <see cref="T:UnityFx.Async.IAsyncOperation`1"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.SocketExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            <param name="socket">The target socket.</param>
            <param name="buffer">An array of bytes that is the storage location for the received data.</param>
            <param name="offset">The zero-based position in the <paramref name="buffer"/> at which to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> is less than 0 or <paramref name="offset"/> is greater
            than the length of <paramref name="buffer"/> or <paramref name="size"/> is less than 0 or <paramref name="size"/> is greater
            than the length of <paramref name="buffer"/> minus the value of the <paramref name="offset"/> parameter.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the <paramref name="socket"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the <paramref name="socket"/> has been closed.</exception>
            <returns>Returns <see cref="T:UnityFx.Async.IAsyncOperation`1"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:UnityFx.Async.Extensions.StreamExtensions">
            <summary>
            Extension methods for <see cref="T:System.IO.Stream"/> class.
            </summary>
        </member>
        <member name="M:UnityFx.Async.Extensions.StreamExtensions.ReadAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="stream">The stream to read data from.</param>
            <param name="buffer">The buffer to write the data into.</param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing data from the stream.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the <paramref name="buffer"/> length.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the stream does not support reading.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the stream is currently in use by a previous read operation.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the stream has been disposed.</exception>
            <returns>An <see cref="T:UnityFx.Async.IAsyncOperation`1"/> that represents the asynchronous read operation. The value of the result
            parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested
            if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream
            has been reached.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.StreamExtensions.WriteAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="stream">The stream to write data to.</param>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> from which to begin copying bytes to the stream.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the <paramref name="buffer"/> length.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the stream does not support writing.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the stream is currently in use by a previous write operation.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the stream has been disposed.</exception>
            <returns>An <see cref="T:UnityFx.Async.IAsyncOperation"/> that represents the asynchronous write operation.</returns>
        </member>
        <member name="T:UnityFx.Async.Extensions.SynchronizationContextExtensions">
            <summary>
            Extension methods for <see cref="T:System.Threading.SynchronizationContext"/>.
            </summary>
        </member>
        <member name="M:UnityFx.Async.Extensions.SynchronizationContextExtensions.Send(System.Threading.SynchronizationContext,System.Action)">
            <summary>
            Dispatches an synchronous message to a synchronization context.
            </summary>
            <param name="context">The target context.</param>
            <param name="action">The delegate to invoke.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:UnityFx.Async.Extensions.SynchronizationContextExtensions.Send``1(System.Threading.SynchronizationContext,System.Func{``0})">
            <summary>
            Dispatches an synchronous message to a synchronization context.
            </summary>
            <param name="context">The target context.</param>
            <param name="action">The delegate to invoke.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>Returns result of the <paramref name="action"/> call.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.SynchronizationContextExtensions.Post(System.Threading.SynchronizationContext,System.Action)">
            <summary>
            Dispatches an asynchronous message to a synchronization context.
            </summary>
            <param name="context">The target context.</param>
            <param name="action">The delegate to invoke.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:UnityFx.Async.Extensions.SynchronizationContextExtensions.PostAsync(System.Threading.SynchronizationContext,System.Action)">
            <summary>
            Dispatches an asynchronous message to a synchronization context.
            </summary>
            <param name="context">The target context.</param>
            <param name="action">The delegate to invoke.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An <see cref="T:UnityFx.Async.IAsyncOperation"/> that can be used to track the operation status.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.SynchronizationContextExtensions.PostAsync(System.Threading.SynchronizationContext,System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches an asynchronous message to a synchronization context.
            </summary>
            <param name="context">The target context.</param>
            <param name="d">The delegate to invoke.</param>
            <param name="state">User-defined state.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="d"/> is <see langword="null"/>.</exception>
            <returns>An <see cref="T:UnityFx.Async.IAsyncOperation"/> that can be used to track the operation status.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.SynchronizationContextExtensions.PostAsync``1(System.Threading.SynchronizationContext,System.Func{``0})">
            <summary>
            Dispatches an asynchronous message to a synchronization context.
            </summary>
            <param name="context">The target context.</param>
            <param name="action">The delegate to invoke.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An <see cref="T:UnityFx.Async.IAsyncOperation`1"/> that can be used to track the operation status.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.SynchronizationContextExtensions.Invoke(System.Threading.SynchronizationContext,System.Action)">
            <summary>
            Dispatches a message to a synchronization context.
            </summary>
            <param name="context">The target context.</param>
            <param name="action">The delegate to invoke.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:UnityFx.Async.Extensions.SynchronizationContextExtensions.InvokeAsync(System.Threading.SynchronizationContext,System.Action)">
            <summary>
            Dispatches a message to a synchronization context.
            </summary>
            <param name="context">The target context.</param>
            <param name="action">The delegate to invoke.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An <see cref="T:UnityFx.Async.IAsyncOperation"/> that can be used to track the operation status.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.SynchronizationContextExtensions.Invoke(System.Threading.SynchronizationContext,System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches a message to a synchronization context.
            </summary>
            <param name="context">The target context.</param>
            <param name="d">The delegate to invoke.</param>
            <param name="state">User-defined state.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="d"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:UnityFx.Async.Extensions.SynchronizationContextExtensions.InvokeAsync(System.Threading.SynchronizationContext,System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches a message to a synchronization context.
            </summary>
            <param name="context">The target context.</param>
            <param name="d">The delegate to invoke.</param>
            <param name="state">User-defined state.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="d"/> is <see langword="null"/>.</exception>
            <returns>An <see cref="T:UnityFx.Async.IAsyncOperation"/> that can be used to track the operation status.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.SynchronizationContextExtensions.InvokeAsync``1(System.Threading.SynchronizationContext,System.Func{``0})">
            <summary>
            Dispatches a message to a synchronization context.
            </summary>
            <param name="context">The target context.</param>
            <param name="action">The delegate to invoke.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An <see cref="T:UnityFx.Async.IAsyncOperation`1"/> that can be used to track the operation status.</returns>
        </member>
        <member name="T:UnityFx.Async.Extensions.TaskExtensions">
            <summary>
            Extension methods for <see cref="T:System.Threading.Tasks.Task"/> and <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
        </member>
        <member name="M:UnityFx.Async.Extensions.TaskExtensions.ToAsync(System.Threading.Tasks.Task)">
            <summary>
            Creates an <see cref="T:UnityFx.Async.IAsyncOperation"/> instance that completes when the specified <paramref name="task"/> completes.
            </summary>
            <param name="task">The task to convert to <see cref="T:UnityFx.Async.IAsyncOperation"/>.</param>
            <returns>An <see cref="T:UnityFx.Async.IAsyncOperation"/> that represents the <paramref name="task"/>.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.TaskExtensions.ToAsync``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Creates an <see cref="T:UnityFx.Async.IAsyncOperation"/> instance that completes when the specified <paramref name="task"/> completes.
            </summary>
            <param name="task">The task to convert to <see cref="T:UnityFx.Async.IAsyncOperation"/>.</param>
            <returns>An <see cref="T:UnityFx.Async.IAsyncOperation"/> that represents the <paramref name="task"/>.</returns>
        </member>
        <member name="T:UnityFx.Async.Extensions.WebRequestExtensions">
            <summary>
            Extension methods for <see cref="T:System.Net.WebRequest"/> class.
            </summary>
        </member>
        <member name="M:UnityFx.Async.Extensions.WebRequestExtensions.GetRequestStreamAsync(System.Net.WebRequest)">
            <summary>
            Returns a <see cref="T:System.IO.Stream"/> for writing data to the Internet resource as an asynchronous operation.
            </summary>
            <param name="webRequest">The source <see cref="T:System.Net.WebRequest"/>.</param>
            <exception cref="T:System.NotImplementedException">Thrown if an attempt is made to access the method, when the method is not overridden in a descendant class.</exception>
            <returns>Returns <see cref="T:UnityFx.Async.IAsyncOperation`1"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:UnityFx.Async.Extensions.WebRequestExtensions.GetResponseAsync(System.Net.WebRequest)">
            <summary>
            Begins an asynchronous request for an Internet resource.
            </summary>
            <param name="webRequest">The source <see cref="T:System.Net.WebRequest"/>.</param>
            <exception cref="T:System.NotImplementedException">Thrown if an attempt is made to access the method, when the method is not overridden in a descendant class.</exception>
            <returns>Returns <see cref="T:UnityFx.Async.IAsyncOperation`1"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:UnityFx.Async.IAsyncCancellable">
            <summary>
            A cancellable operation.
            </summary>
            <seealso cref="T:UnityFx.Async.IAsyncOperation"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncCancellable.Cancel">
            <summary>
            Initiates cancellation of an asynchronous operation. There is no guarantee that this call will actually cancel
            the operation or that the operation will be cancelled immidiately.
            </summary>
        </member>
        <member name="T:UnityFx.Async.IAsyncCompletionSource">
            <summary>
            Represents the producer side of an asynchronous operation unbound to a delegate, providing access to the consumer side through the <see cref="P:UnityFx.Async.IAsyncCompletionSource.Operation"/> property.
            </summary>
            <seealso cref="T:UnityFx.Async.IAsyncOperation"/>
        </member>
        <member name="P:UnityFx.Async.IAsyncCompletionSource.Operation">
            <summary>
            Gets the operation being controller by the source.
            </summary>
            <value>The underlying operation instance.</value>
        </member>
        <member name="M:UnityFx.Async.IAsyncCompletionSource.TrySetProgress(System.Single)">
            <summary>
            Attempts to set the operation progress value in range [0, 1].
            </summary>
            <param name="progress">The operation progress in range [0, 1].</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="progress"/> is not in range [0, 1].</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource.TrySetCompleted"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncCompletionSource.TrySetCanceled">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Canceled"/> state.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource.TrySetException(System.Exception)"/>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource.TrySetCompleted"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncCompletionSource.TrySetException(System.Exception)">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> state.
            </summary>
            <param name="exception">An exception that caused the operation to end prematurely.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="exception"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource.TrySetCanceled"/>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource.TrySetCompleted"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncCompletionSource.TrySetCompleted">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> state.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource.TrySetCanceled"/>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource.TrySetException(System.Exception)"/>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource.TrySetProgress(System.Single)"/>
        </member>
        <member name="T:UnityFx.Async.IAsyncCompletionSource`1">
            <summary>
            Represents the producer side of a <see cref="T:UnityFx.Async.IAsyncOperation`1"/> unbound to a delegate, providing access to the consumer side through the <see cref="P:UnityFx.Async.IAsyncCompletionSource`1.Operation"/> property.
            </summary>
            <typeparam name="TResult">Type of the operation result value.</typeparam>
            <seealso cref="T:UnityFx.Async.IAsyncOperation`1"/>
        </member>
        <member name="P:UnityFx.Async.IAsyncCompletionSource`1.Operation">
            <summary>
            Gets the operation being controller by the source.
            </summary>
            <value>The underlying operation instance.</value>
        </member>
        <member name="M:UnityFx.Async.IAsyncCompletionSource`1.TrySetProgress(System.Single)">
            <summary>
            Attempts to set the operation progress value in range [0, 1].
            </summary>
            <param name="progress">The operation progress in range [0, 1].</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="progress"/> is not in range [0, 1].</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource`1.TrySetResult(`0)"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncCompletionSource`1.TrySetCanceled">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation`1"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Canceled"/> state.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource`1.TrySetException(System.Exception)"/>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource`1.TrySetResult(`0)"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncCompletionSource`1.TrySetException(System.Exception)">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation`1"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> state.
            </summary>
            <param name="exception">An exception that caused the operation to end prematurely.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="exception"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource`1.TrySetCanceled"/>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource`1.TrySetResult(`0)"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncCompletionSource`1.TrySetResult(`0)">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation`1"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> state.
            </summary>
            <param name="result">The operation result.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource`1.TrySetCanceled"/>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource`1.TrySetException(System.Exception)"/>
        </member>
        <member name="T:UnityFx.Async.IAsyncContinuation">
            <summary>
            A generic non-delegate continuation.
            </summary>
            <remarks>
            This interface is a great helper for combining functionality and reducing number of allocations.
            It is especially useful for implementing custom continuation operations.
            </remarks>
            <seealso cref="T:UnityFx.Async.IAsyncOperation"/>
            <seealso cref="T:UnityFx.Async.AsyncContinuationOptions"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncContinuation.Invoke(UnityFx.Async.IAsyncOperation)">
            <summary>
            Invokes the continuation.
            </summary>
            <param name="op">The completed antecedent operation.</param>
        </member>
        <member name="T:UnityFx.Async.IAsyncOperation">
            <summary>
            Represents the consumer side of an asynchronous operation (promise).
            </summary>
            <remarks>
            The interface defines a read-only consumer side of an asynchronous operation. Basically
            it provides the operation state information and completion/progress events. It is cancellable
            so a cancellation request can be issued at any time (without any guarantees though).
            </remarks>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task">Task</seealso>
            <seealso cref="T:UnityFx.Async.IAsyncCompletionSource"/>
            <seealso cref="T:UnityFx.Async.IAsyncOperation`1"/>
            <seealso cref="T:UnityFx.Async.AsyncResult"/>
        </member>
        <member name="P:UnityFx.Async.IAsyncOperation.Id">
            <summary>
            Gets a unique ID for the operation instance.
            </summary>
            <remarks>
            The identifiers might be assigned on demand and do not represent the order in which operations instances were created.
            </remarks>
            <value>Unique non-zero identifier of the operation instance.</value>
        </member>
        <member name="P:UnityFx.Async.IAsyncOperation.Progress">
            <summary>
            Gets the operation progress [0, 1].
            </summary>
            <remarks>
            Different operation implementations might provide different progress resolution. Users of this
            interface can expect 0 value until the operation is started and 1 when it is completed as minimum.
            </remarks>
            <value>Progress of the operation in range [0, 1].</value>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.Status"/>
        </member>
        <member name="P:UnityFx.Async.IAsyncOperation.Status">
            <summary>
            Gets the operation status identifier.
            </summary>
            <value>Identifier of the operation status.</value>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.IsCompletedSuccessfully"/>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.IsFaulted"/>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.IsCanceled"/>
        </member>
        <member name="P:UnityFx.Async.IAsyncOperation.Exception">
            <summary>
            Gets an exception that caused the operation to end prematurely. If the operation completed successfully
            or has not yet thrown any exceptions, this will return <see langword="null"/>.
            </summary>
            <remarks>
            Task uses a special aggregate exception for providing generic error information. The library does not allow
            child operations by design and this fact makes usage of aggregate exceptions a very rare case. This is
            why we use <see cref="T:System.Exception"/> here.
            </remarks>
            <value>An exception that caused the operation to end prematurely.</value>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.IsFaulted"/>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.Status"/>
        </member>
        <member name="P:UnityFx.Async.IAsyncOperation.IsCompletedSuccessfully">
            <summary>
            Gets a value indicating whether the operation completed successfully (i.e. with <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> status).
            </summary>
            <value>A value indicating whether the operation completed successfully.</value>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.IsFaulted"/>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.IsCanceled"/>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.Status"/>
        </member>
        <member name="P:UnityFx.Async.IAsyncOperation.IsFaulted">
            <summary>
            Gets a value indicating whether the operation completed due to an unhandled exception (i.e. with <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> status).
            </summary>
            <remarks>
            If <see cref="P:UnityFx.Async.IAsyncOperation.IsFaulted"/> is <see langword="true"/>, the operation's <see cref="P:UnityFx.Async.IAsyncOperation.Status"/> will be equal to
            <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/>, and its <see cref="P:UnityFx.Async.IAsyncOperation.Exception"/> property will be non-<see langword="null"/>.
            </remarks>
            <value>A value indicating whether the operation has failed.</value>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.Exception"/>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.IsCompletedSuccessfully"/>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.IsCanceled"/>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.Status"/>
        </member>
        <member name="P:UnityFx.Async.IAsyncOperation.IsCanceled">
            <summary>
            Gets a value indicating whether the operation completed due to being canceled (i.e. with <see cref="F:UnityFx.Async.AsyncOperationStatus.Canceled"/> status).
            </summary>
            <remarks>
            If <see cref="P:UnityFx.Async.IAsyncOperation.IsCanceled"/> is <see langword="true"/>, the operation's <see cref="P:UnityFx.Async.IAsyncOperation.Status"/> will be equal to
            <see cref="F:UnityFx.Async.AsyncOperationStatus.Canceled"/>, and its <see cref="P:UnityFx.Async.IAsyncOperation.Exception"/> property will be non-<see langword="null"/>.
            </remarks>
            <value>A value indicating whether the operation was canceled.</value>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.IsCompletedSuccessfully"/>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.IsFaulted"/>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.Status"/>
        </member>
        <member name="T:UnityFx.Async.IAsyncOperationCallbacks">
            <summary>
            Defines basic callback management tools for <see cref="T:UnityFx.Async.IAsyncOperation"/>.
            </summary>
            <seealso cref="T:UnityFx.Async.IAsyncOperation"/>
        </member>
        <member name="E:UnityFx.Async.IAsyncOperationCallbacks.ProgressChanged">
            <summary>
            Raised when the operation progress is changed.
            </summary>
            <remarks>
            The event handler is invoked on a thread that registered it (if it has a <see cref="T:System.Threading.SynchronizationContext"/> attached).
            If the operation is already completed the event handler is called synchronously. Throwing an exception from the event handler
            might cause unspecified behaviour.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the delegate being registered is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation has been disposed.</exception>
            <seealso cref="E:UnityFx.Async.IAsyncOperationCallbacks.Completed"/>
        </member>
        <member name="E:UnityFx.Async.IAsyncOperationCallbacks.Completed">
            <summary>
            Raised when the operation is completed.
            </summary>
            <remarks>
            The event handler is invoked on a thread that registered it (if it has a <see cref="T:System.Threading.SynchronizationContext"/> attached).
            If the operation is already completed the event handler is called synchronously. Throwing an exception from the event handler
            might cause unspecified behaviour.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the delegate being registered is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation has been disposed.</exception>
            <seealso cref="E:UnityFx.Async.IAsyncOperationCallbacks.ProgressChanged"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncOperationCallbacks.AddCompletionCallback(System.Object,System.Threading.SynchronizationContext)">
            <summary>
            Adds a completion callback to be executed after the operation has completed. If the operation is completed <paramref name="callback"/> is invoked
            on the <paramref name="syncContext"/> specified. Throwing an exception from the callback causes unspecified behaviour. The method is not intended
            to be used by user code. Do not use if not sure.
            </summary>
            <remarks>
            The <paramref name="callback"/> is invoked on a <see cref="T:System.Threading.SynchronizationContext"/> specified.
            </remarks>
            <param name="callback">The callback to be executed when the operation has completed. Can be one of <see cref="T:System.Action"/>, <see cref="T:System.Action`1"/>
            (with <see cref="T:UnityFx.Async.IAsyncOperation"/> argument type), <see cref="T:System.AsyncCallback"/>, <see cref="T:UnityFx.Async.IAsyncContinuation"/> or <see cref="T:System.ComponentModel.AsyncCompletedEventHandler"/>.</param>
            <param name="syncContext">If not <see langword="null"/> method attempts to marshal the continuation to the synchronization context.
            Otherwise the callback is invoked on a thread that initiated the operation completion.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="callback"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation has been disposed.</exception>
            <seealso cref="M:UnityFx.Async.IAsyncOperationCallbacks.AddProgressCallback(System.Object,System.Threading.SynchronizationContext)"/>
            <seealso cref="M:UnityFx.Async.IAsyncOperationCallbacks.RemoveCallback(System.Object)"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncOperationCallbacks.AddProgressCallback(System.Object,System.Threading.SynchronizationContext)">
            <summary>
            Adds a callback to be executed when the operation progress has changed. If the operation is completed <paramref name="callback"/> is invoked
            on the <paramref name="syncContext"/> specified. Throwing an exception from the callback might cause unspecified behaviour. The method is not intended
            to be used by user code. Do not use if not sure.
            </summary>
            <remarks>
            The <paramref name="callback"/> is invoked on a <see cref="T:System.Threading.SynchronizationContext"/> specified.
            </remarks>
            <param name="callback">The callback to be executed when the operation progress has changed.</param>
            <param name="syncContext">If not <see langword="null"/> method attempts to marshal the continuation to the synchronization context.
            Otherwise the callback is invoked on a thread that initiated the operation.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="callback"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation has been disposed.</exception>
            <seealso cref="M:UnityFx.Async.IAsyncOperationCallbacks.AddCompletionCallback(System.Object,System.Threading.SynchronizationContext)"/>
            <seealso cref="M:UnityFx.Async.IAsyncOperationCallbacks.RemoveCallback(System.Object)"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncOperationCallbacks.RemoveCallback(System.Object)">
            <summary>
            Removes an existing completion/progress callback.
            </summary>
            <param name="callback">The callback to remove. Can be <see langword="null"/>.</param>
            <returns>Returns <see langword="true"/> if <paramref name="callback"/> was removed; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.IAsyncOperationCallbacks.AddCompletionCallback(System.Object,System.Threading.SynchronizationContext)"/>
            <seealso cref="M:UnityFx.Async.IAsyncOperationCallbacks.AddProgressCallback(System.Object,System.Threading.SynchronizationContext)"/>
        </member>
        <member name="T:UnityFx.Async.IAsyncOperation`1">
            <summary>
            Represents the consumer side of an asynchronous operation (promise). Extends <see cref="T:UnityFx.Async.IAsyncOperation"/>
            interface with a result value.
            </summary>
            <typeparam name="TResult">Type of the operation result value.</typeparam>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task-1">Task</seealso>
            <seealso cref="T:UnityFx.Async.IAsyncCompletionSource`1"/>
            <seealso cref="T:UnityFx.Async.IAsyncOperation"/>
            <seealso cref="T:UnityFx.Async.AsyncResult`1"/>
        </member>
        <member name="P:UnityFx.Async.IAsyncOperation`1.Result">
            <summary>
            Gets the operation result value.
            </summary>
            <remarks>
            Once the result of an operation is available, it is stored and is returned immediately on subsequent calls to the <see cref="P:UnityFx.Async.IAsyncOperation`1.Result"/> property.
            Unlike Tasks accessing the property does not block the calling thread (<see cref="T:System.InvalidOperationException"/> is throws instead).
            Note that, if an exception occurred during the operation, or if the operation has been cancelled, the <see cref="P:UnityFx.Async.IAsyncOperation`1.Result"/> property does not return a value.
            Instead, attempting to access the property value throws an exception.
            </remarks>
            <value>Result of the operation.</value>
            <exception cref="T:System.InvalidOperationException">Thrown if the property is accessed before operation is completed.</exception>
        </member>
        <member name="T:UnityFx.Async.IAsyncUpdatable">
            <summary>
            Defines an updatable entity.
            </summary>
            <seealso cref="T:UnityFx.Async.IAsyncUpdateSource"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncUpdatable.Update(System.Single)">
            <summary>
            Updates the object state. Called by <see cref="T:UnityFx.Async.IAsyncUpdateSource"/>.
            </summary>
            <param name="frameTime">Time since last call in seconds.</param>
        </member>
        <member name="T:UnityFx.Async.IAsyncUpdateSource">
            <summary>
            A provider of update notifications.
            </summary>
            <seealso cref="T:UnityFx.Async.IAsyncUpdatable"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncUpdateSource.AddListener(System.Action{System.Single})">
            <summary>
            Adds a new update listener.
            </summary>
            <param name="updateCallback">An update callback.</param>
            <exception cref="T:System.ArgumentNullException">Thrown is <paramref name="updateCallback"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:UnityFx.Async.IAsyncUpdateSource.RemoveListener(System.Action{System.Single})">
            <summary>
            Removes an existing listener.
            </summary>
            <param name="updateCallback">An update listener. Can be <see langword="null"/>.</param>
        </member>
        <member name="M:UnityFx.Async.IAsyncUpdateSource.AddListener(UnityFx.Async.IAsyncUpdatable)">
            <summary>
            Adds a new update listener.
            </summary>
            <param name="updatable">An update listener.</param>
            <exception cref="T:System.ArgumentNullException">Thrown is <paramref name="updatable"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:UnityFx.Async.IAsyncUpdateSource.RemoveListener(UnityFx.Async.IAsyncUpdatable)">
            <summary>
            Removes an existing listener.
            </summary>
            <param name="updatable">An update listener. Can be <see langword="null"/>.</param>
        </member>
        <member name="T:UnityFx.Async.Promises.ExceptionEventArgs">
            <summary>
            Arguments of <see cref="E:UnityFx.Async.Promises.Promise.UnhandledException"/> event.
            </summary>
        </member>
        <member name="P:UnityFx.Async.Promises.ExceptionEventArgs.Exception">
            <summary>
            Gets the stored <see cref="P:UnityFx.Async.Promises.ExceptionEventArgs.Exception"/>.
            </summary>
        </member>
        <member name="M:UnityFx.Async.Promises.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.Promises.ExceptionEventArgs"/> class.
            </summary>
        </member>
        <member name="T:UnityFx.Async.Promises.Promise">
            <summary>
            Promise-related helpers.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"/>
        </member>
        <member name="E:UnityFx.Async.Promises.Promise.UnhandledException">
            <summary>
            Event raised for unhandled exceptions. For this to work you have to complete your promises with a call to Done().
            </summary>
        </member>
        <member name="M:UnityFx.Async.Promises.Promise.Resolved">
            <summary>
            Creates a promise that's already been resolved.
            </summary>
            <seealso cref="M:UnityFx.Async.Promises.Promise.Rejected(System.Exception)"/>
            <seealso cref="M:UnityFx.Async.Promises.Promise.Resolved``1(``0)"/>
        </member>
        <member name="M:UnityFx.Async.Promises.Promise.Resolved``1(``0)">
            <summary>
            Creates a promise that's already been resolved with the specified value.
            </summary>
            <seealso cref="M:UnityFx.Async.Promises.Promise.Rejected(System.Exception)"/>
            <seealso cref="M:UnityFx.Async.Promises.Promise.Resolved"/>
        </member>
        <member name="M:UnityFx.Async.Promises.Promise.Rejected">
            <summary>
            Creates a promise that's already been rejected.
            </summary>
            <seealso cref="M:UnityFx.Async.Promises.Promise.Rejected(System.String)"/>
            <seealso cref="M:UnityFx.Async.Promises.Promise.Rejected(System.Exception)"/>
            <seealso cref="M:UnityFx.Async.Promises.Promise.Resolved"/>
        </member>
        <member name="M:UnityFx.Async.Promises.Promise.Rejected(System.String)">
            <summary>
            Creates a promise that's already been rejected with the specified error <paramref name="message"/>.
            </summary>
            <seealso cref="M:UnityFx.Async.Promises.Promise.Rejected(System.Exception)"/>
            <seealso cref="M:UnityFx.Async.Promises.Promise.Rejected"/>
            <seealso cref="M:UnityFx.Async.Promises.Promise.Resolved"/>
        </member>
        <member name="M:UnityFx.Async.Promises.Promise.Rejected(System.Exception)">
            <summary>
            Creates a promise that's already been rejected with the specified <see cref="T:System.Exception"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="e"/> is <see langword="null"/>.</exception>
            <seealso cref="M:UnityFx.Async.Promises.Promise.Rejected(System.String)"/>
            <seealso cref="M:UnityFx.Async.Promises.Promise.Rejected"/>
            <seealso cref="M:UnityFx.Async.Promises.Promise.Resolved"/>
        </member>
        <member name="M:UnityFx.Async.Promises.Promise.All(UnityFx.Async.IAsyncOperation[])">
            <summary>
            Returns a promise that resolves when all of the promises in the enumerable argument have resolved.
            </summary>
            <param name="ops">Operations to wait for.</param>
            <returns>An operation that completes when all specified promises are resolved.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="ops"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="ops"/> collection contained a <see langword="null"/> operation.</exception>
            <seealso cref="M:UnityFx.Async.Promises.Promise.All(System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation})"/>
        </member>
        <member name="M:UnityFx.Async.Promises.Promise.All(System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation})">
            <summary>
            Returns a promise that resolves when all of the promises in the enumerable argument have resolved.
            </summary>
            <param name="ops">Operations to wait for.</param>
            <returns>An operation that completes when all specified promises are resolved.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="ops"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="ops"/> collection contained a <see langword="null"/> operation.</exception>
            <seealso cref="M:UnityFx.Async.Promises.Promise.All(UnityFx.Async.IAsyncOperation[])"/>
        </member>
        <member name="M:UnityFx.Async.Promises.Promise.Race(UnityFx.Async.IAsyncOperation[])">
            <summary>
            Returns a promise that resolves when any of the promises in the enumerable argument have resolved.
            </summary>
            <param name="ops">Operations to wait for.</param>
            <returns>An operation that completes when any of the specified promises is resolved.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="ops"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="ops"/> collection contained a <see langword="null"/> operation.</exception>
            <seealso cref="M:UnityFx.Async.Promises.Promise.Race(System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation})"/>
        </member>
        <member name="M:UnityFx.Async.Promises.Promise.Race(System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation})">
            <summary>
            Returns a promise that resolves when any of the promises in the enumerable argument have resolved.
            </summary>
            <param name="ops">Operations to wait for.</param>
            <returns>An operation that completes when any of the specified promises is resolved.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="ops"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="ops"/> collection contained a <see langword="null"/> operation.</exception>
            <seealso cref="M:UnityFx.Async.Promises.Promise.Race(UnityFx.Async.IAsyncOperation[])"/>
        </member>
        <member name="M:UnityFx.Async.Promises.Promise.Sequence(System.Func{UnityFx.Async.IAsyncOperation}[])">
            <summary>
            Chain a number of operations using promises.
            </summary>
            <param name="ops">Functions each of which starts an async operation and yields a promise.</param>
            <returns>An operation that completes when all promises in the sequence are resolved.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="ops"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="ops"/> collection contained a <see langword="null"/> operation.</exception>
            <seealso cref="M:UnityFx.Async.Promises.Promise.Sequence(System.Collections.Generic.IEnumerable{System.Func{UnityFx.Async.IAsyncOperation}})"/>
        </member>
        <member name="M:UnityFx.Async.Promises.Promise.Sequence(System.Collections.Generic.IEnumerable{System.Func{UnityFx.Async.IAsyncOperation}})">
            <summary>
            Chain a number of operations using promises.
            </summary>
            <param name="ops">Functions each of which starts an async operation and yields a promise.</param>
            <returns>An operation that completes when all promises in the sequence are resolved.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="ops"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="ops"/> collection contained a <see langword="null"/> operation.</exception>
            <seealso cref="M:UnityFx.Async.Promises.Promise.Sequence(System.Func{UnityFx.Async.IAsyncOperation}[])"/>
        </member>
        <member name="T:UnityFx.Async.Promises.PromiseExtensions">
            <summary>
            Promise extensions for <see cref="T:UnityFx.Async.IAsyncOperation"/>.
            </summary>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.Then(UnityFx.Async.IAsyncOperation,System.Action)">
            <summary>
            Schedules a callback to be executed after the promise has been resolved.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Then``1(UnityFx.Async.IAsyncOperation{``0},System.Action{``0})"/>
            <seealso href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.Then``1(UnityFx.Async.IAsyncOperation{``0},System.Action{``0})">
            <summary>
            Schedules a callback to be executed after the promise has been resolved.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Then(UnityFx.Async.IAsyncOperation,System.Action)"/>
            <seealso href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.Then(UnityFx.Async.IAsyncOperation,System.Func{UnityFx.Async.IAsyncOperation})">
            <summary>
            Schedules a callback to be executed after the promise has been resolved.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the operation returned by <paramref name="successCallback"/> has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Then``1(UnityFx.Async.IAsyncOperation,System.Func{UnityFx.Async.IAsyncOperation{``0}})"/>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Then``1(UnityFx.Async.IAsyncOperation{``0},System.Func{``0,UnityFx.Async.IAsyncOperation})"/>
            <seealso href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.Then``1(UnityFx.Async.IAsyncOperation{``0},System.Func{``0,UnityFx.Async.IAsyncOperation})">
            <summary>
            Schedules a callback to be executed after the promise has been resolved.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the operation returned by <paramref name="successCallback"/> has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Then(UnityFx.Async.IAsyncOperation,System.Func{UnityFx.Async.IAsyncOperation})"/>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Then``1(UnityFx.Async.IAsyncOperation,System.Func{UnityFx.Async.IAsyncOperation{``0}})"/>
            <seealso href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.Then``1(UnityFx.Async.IAsyncOperation,System.Func{UnityFx.Async.IAsyncOperation{``0}})">
            <summary>
            Schedules a callback to be executed after the promise has been resolved.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the operation returned by <paramref name="successCallback"/> has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Then(UnityFx.Async.IAsyncOperation,System.Func{UnityFx.Async.IAsyncOperation})"/>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Then``1(UnityFx.Async.IAsyncOperation{``0},System.Func{``0,UnityFx.Async.IAsyncOperation})"/>
            <seealso href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.Then``2(UnityFx.Async.IAsyncOperation{``0},System.Func{``0,UnityFx.Async.IAsyncOperation{``1}})">
            <summary>
            Schedules a callback to be executed after the promise has been resolved.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the operation returned by <paramref name="successCallback"/> has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Then(UnityFx.Async.IAsyncOperation,System.Func{UnityFx.Async.IAsyncOperation})"/>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Then``1(UnityFx.Async.IAsyncOperation,System.Func{UnityFx.Async.IAsyncOperation{``0}})"/>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Then``1(UnityFx.Async.IAsyncOperation{``0},System.Func{``0,UnityFx.Async.IAsyncOperation})"/>
            <seealso href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.Then(UnityFx.Async.IAsyncOperation,System.Action,System.Action{System.Exception})">
            <summary>
            Schedules a callbacks to be executed after the operation has been resolved.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has succeeded.</param>
            <param name="errorCallback">The callback to be executed when the operation has faulted/was canceled.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Then``1(UnityFx.Async.IAsyncOperation{``0},System.Action{``0},System.Action{System.Exception})"/>
            <seealso href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.Then``1(UnityFx.Async.IAsyncOperation{``0},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Schedules a callbacks to be executed after the operation has been resolved.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has succeeded.</param>
            <param name="errorCallback">The callback to be executed when the operation has faulted/was canceled.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Then(UnityFx.Async.IAsyncOperation,System.Action,System.Action{System.Exception})"/>
            <seealso href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.Then(UnityFx.Async.IAsyncOperation,System.Func{UnityFx.Async.IAsyncOperation},System.Action{System.Exception})">
            <summary>
            Schedules a callbacks to be executed after the operation has been resolved.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has succeeded.</param>
            <param name="errorCallback">The callback to be executed when the operation has faulted/was canceled.</param>
            <returns>Returns a continuation operation that completes after both source operation and the operation returned by <paramref name="successCallback"/> has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Then``1(UnityFx.Async.IAsyncOperation{``0},System.Func{``0,UnityFx.Async.IAsyncOperation})"/>
            <seealso href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.Then``1(UnityFx.Async.IAsyncOperation{``0},System.Func{``0,UnityFx.Async.IAsyncOperation},System.Action{System.Exception})">
            <summary>
            Schedules a callbacks to be executed after the operation has been resolved.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has succeeded.</param>
            <param name="errorCallback">The callback to be executed when the operation has faulted/was canceled.</param>
            <returns>Returns a continuation operation that completes after both source operation and the operation returned by <paramref name="successCallback"/> has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Then(UnityFx.Async.IAsyncOperation,System.Func{UnityFx.Async.IAsyncOperation},System.Action{System.Exception})"/>
            <seealso href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.ThenAll(UnityFx.Async.IAsyncOperation,System.Func{System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation}})">
            <summary>
            Schedules a callback to be executed after the promise has been resolved. The resulting operation will complete after all of the operations in the callback return value have completed.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.ThenAll``1(UnityFx.Async.IAsyncOperation{``0},System.Func{``0,System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation}})"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.ThenAll``1(UnityFx.Async.IAsyncOperation{``0},System.Func{``0,System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation}})">
            <summary>
            Schedules a callback to be executed after the promise has been resolved. The resulting operation will complete after all of the operations in the callback return value have completed.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.ThenAll(UnityFx.Async.IAsyncOperation,System.Func{System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation}})"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.ThenAll``1(UnityFx.Async.IAsyncOperation,System.Func{System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation{``0}}})">
            <summary>
            Schedules a callback to be executed after the promise has been resolved. The resulting operation will complete after all of the operations in the callback return value have completed.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.ThenAll``2(UnityFx.Async.IAsyncOperation{``0},System.Func{``0,System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation{``1}}})"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.ThenAll``2(UnityFx.Async.IAsyncOperation{``0},System.Func{``0,System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation{``1}}})">
            <summary>
            Schedules a callback to be executed after the promise has been resolved. The resulting operation will complete after all of the specified objects in an array have completed.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.ThenAll``1(UnityFx.Async.IAsyncOperation,System.Func{System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation{``0}}})"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.ThenAny(UnityFx.Async.IAsyncOperation,System.Func{System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation}})">
            <summary>
            Schedules a callback to be executed after the promise has been resolved. The resulting operation will complete after any of the operations in the callback return value have completed.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.ThenAny``1(UnityFx.Async.IAsyncOperation{``0},System.Func{``0,System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation}})"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.ThenAny``1(UnityFx.Async.IAsyncOperation{``0},System.Func{``0,System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation}})">
            <summary>
            Schedules a callback to be executed after the promise has been resolved. The resulting operation will complete after any of the operations in the callback return value have completed.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.ThenAny(UnityFx.Async.IAsyncOperation,System.Func{System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation}})"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.ThenAny``1(UnityFx.Async.IAsyncOperation,System.Func{System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation{``0}}})">
            <summary>
            Schedules a callback to be executed after the promise has been resolved. The resulting operation will complete after any of the operations in the callback return value have completed.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.ThenAny``2(UnityFx.Async.IAsyncOperation{``0},System.Func{``0,System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation{``1}}})"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.ThenAny``2(UnityFx.Async.IAsyncOperation{``0},System.Func{``0,System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation{``1}}})">
            <summary>
            Schedules a callback to be executed after the promise has been resolved. The resulting operation will complete after any of the operations in the callback return value have completed.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.ThenAny``1(UnityFx.Async.IAsyncOperation,System.Func{System.Collections.Generic.IEnumerable{UnityFx.Async.IAsyncOperation{``0}}})"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.ThenSequence(UnityFx.Async.IAsyncOperation,System.Func{System.Collections.Generic.IEnumerable{System.Func{UnityFx.Async.IAsyncOperation}}})">
            <summary>
            Schedules a callback to be executed after the promise has been resolved. The resulting operation will complete after all of the operations in the callback have completed.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.ThenSequence``1(UnityFx.Async.IAsyncOperation{``0},System.Func{System.Collections.Generic.IEnumerable{System.Func{UnityFx.Async.IAsyncOperation}}})">
            <summary>
            Schedules a callback to be executed after the promise has been resolved. The resulting operation will complete after all of the operations in the callback have completed.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.ThenSequence(UnityFx.Async.IAsyncOperation,System.Func{System.Func{UnityFx.Async.IAsyncOperation}[]})">
            <summary>
            Schedules a callback to be executed after the promise has been resolved. The resulting operation will complete after all of the operations in the callback have completed.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.ThenSequence``1(UnityFx.Async.IAsyncOperation{``0},System.Func{System.Func{UnityFx.Async.IAsyncOperation}[]})">
            <summary>
            Schedules a callback to be executed after the promise has been resolved. The resulting operation will complete after all of the operations in the callback have completed.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.Rebind``1(UnityFx.Async.IAsyncOperation,System.Func{``0})">
            <summary>
            Transforms the promise result to another type.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Rebind``2(UnityFx.Async.IAsyncOperation{``0},System.Func{``0,``1})"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.Rebind``2(UnityFx.Async.IAsyncOperation{``0},System.Func{``0,``1})">
            <summary>
            Transforms the promise result to another type.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Rebind``1(UnityFx.Async.IAsyncOperation,System.Func{``0})"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.Catch(UnityFx.Async.IAsyncOperation,System.Action{System.Exception})">
            <summary>
            Schedules a callback to be executed after the promise has been rejected.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="errorCallback">The callback to be executed when the operation has faulted/was canceled.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Catch``1(UnityFx.Async.IAsyncOperation,System.Action{``0})"/>
            <seealso href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.Catch``1(UnityFx.Async.IAsyncOperation,System.Action{``0})">
            <summary>
            Schedules a callback to be executed after the promise has been rejected.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="errorCallback">The callback to be executed when the operation has faulted/was canceled.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Catch(UnityFx.Async.IAsyncOperation,System.Action{System.Exception})"/>
            <seealso href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.Finally(UnityFx.Async.IAsyncOperation,System.Action)">
            <summary>
            Schedules a callback to be executed after the promise has completed.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="action">The callback to be executed when the operation has completed.</param>
            <returns>Returns a continuation operation that completes after both source operation and the callback has completed.</returns>
            <seealso href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.Done(UnityFx.Async.IAsyncOperation,System.Action)">
            <summary>
            Schedules a callback to be executed after the promise chain has completed. Routes unhendled errors to <see cref="E:UnityFx.Async.Promises.Promise.UnhandledException"/>.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the promise has resolved.</param>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Done(UnityFx.Async.IAsyncOperation,System.Action,System.Action{System.Exception})"/>
            <seealso cref="E:UnityFx.Async.Promises.Promise.UnhandledException"/>
            <seealso href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.Done(UnityFx.Async.IAsyncOperation,System.Action,System.Action{System.Exception})">
            <summary>
            Schedules a callback to be executed after the promise chain has completed. Routes unhendled errors to <see cref="E:UnityFx.Async.Promises.Promise.UnhandledException"/>.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the promise has resolved.</param>
            <param name="errorCallback">The callback to be executed when the promise was rejected.</param>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Done(UnityFx.Async.IAsyncOperation,System.Action)"/>
            <seealso cref="E:UnityFx.Async.Promises.Promise.UnhandledException"/>
            <seealso href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.Done``1(UnityFx.Async.IAsyncOperation{``0},System.Action{``0})">
            <summary>
            Schedules a callback to be executed after the promise chain has completed. Routes unhendled errors to <see cref="E:UnityFx.Async.Promises.Promise.UnhandledException"/>.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the promise has resolved.</param>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Done``1(UnityFx.Async.IAsyncOperation{``0},System.Action{``0},System.Action{System.Exception})"/>
            <seealso cref="E:UnityFx.Async.Promises.Promise.UnhandledException"/>
            <seealso href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.Done``1(UnityFx.Async.IAsyncOperation{``0},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Schedules a callback to be executed after the promise chain has completed. Routes unhendled errors to <see cref="E:UnityFx.Async.Promises.Promise.UnhandledException"/>.
            </summary>
            <param name="op">An operation to be continued.</param>
            <param name="successCallback">The callback to be executed when the promise has resolved.</param>
            <param name="errorCallback">The callback to be executed when the promise was rejected.</param>
            <seealso cref="M:UnityFx.Async.Promises.PromiseExtensions.Done``1(UnityFx.Async.IAsyncOperation{``0},System.Action{``0})"/>
            <seealso cref="E:UnityFx.Async.Promises.Promise.UnhandledException"/>
            <seealso href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"/>
        </member>
        <member name="M:UnityFx.Async.Promises.PromiseExtensions.Done(UnityFx.Async.IAsyncOperation)">
            <summary>
            Routes unhendled errors to <see cref="E:UnityFx.Async.Promises.Promise.UnhandledException"/>.
            </summary>
            <param name="op">An operation to be continued.</param>
            <seealso cref="E:UnityFx.Async.Promises.Promise.UnhandledException"/>
            <seealso href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"/>
        </member>
        <member name="T:UnityFx.Async.CallbackData">
            <summary>
            A callback with <see cref="T:System.Threading.SynchronizationContext"/>.
            </summary>
        </member>
        <member name="T:UnityFx.Async.IAsyncCallbackCollection">
            <summary>
            Generic interface of a <see cref="T:UnityFx.Async.AsyncResult"/> callback storage.
            </summary>
        </member>
        <member name="M:UnityFx.Async.IAsyncCallbackCollection.AddCompletionCallback(System.Object,System.Threading.SynchronizationContext)">
            <summary>
            Adds a new completion callback.
            </summary>
            <param name="callback">The callback instance to add.</param>
            <param name="syncContext">A synchronization context to invoke callback on or <see langword="null"/>.</param>
            <seealso cref="M:UnityFx.Async.IAsyncCallbackCollection.AddProgressCallback(System.Object,System.Threading.SynchronizationContext)"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncCallbackCollection.AddProgressCallback(System.Object,System.Threading.SynchronizationContext)">
            <summary>
            Adds a new progress callback.
            </summary>
            <param name="callback">The callback instance to add.</param>
            <param name="syncContext">A synchronization context to invoke callback on or <see langword="null"/>.</param>
            <seealso cref="M:UnityFx.Async.IAsyncCallbackCollection.AddCompletionCallback(System.Object,System.Threading.SynchronizationContext)"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncCallbackCollection.Remove(System.Object)">
            <summary>
            Removes the specified completion/progress callback.
            </summary>
            <param name="callback">The calback instance to remove.</param>
            <returns>Returns <see langword="true"/> if the callback was actually present in the collection; otherwise <see langword="false"/>.</returns>
            <seealso cref="M:UnityFx.Async.IAsyncCallbackCollection.AddCompletionCallback(System.Object,System.Threading.SynchronizationContext)"/>
            <seealso cref="M:UnityFx.Async.IAsyncCallbackCollection.AddProgressCallback(System.Object,System.Threading.SynchronizationContext)"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncCallbackCollection.Invoke(System.Boolean)">
            <summary>
            Invokes all callbacks stored in the collection.
            </summary>
            <param name="invokeAsync">If <see langword="true"/> the callback is posted to the synchronization context even if it matches the calling thread one.</param>
            <seealso cref="M:UnityFx.Async.IAsyncCallbackCollection.InvokeProgressCallbacks"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncCallbackCollection.InvokeProgressCallbacks">
            <summary>
            Invokes progress callbacks only.
            </summary>
            <seealso cref="M:UnityFx.Async.IAsyncCallbackCollection.Invoke(System.Boolean)"/>
        </member>
        <member name="T:UnityFx.Async.ListCallbackCollection">
            <summary>
            An implementation of <see cref="T:UnityFx.Async.IAsyncCallbackCollection"/> based on a <see cref="T:System.Collections.Generic.List`1"/>. A <see cref="T:System.Threading.SynchronizationContext"/>
            instance is stored for each callback.
            </summary>
        </member>
        <member name="T:UnityFx.Async.MultiContextCallbackCollection">
            <summary>
            An implementation of <see cref="T:UnityFx.Async.IAsyncCallbackCollection"/>. The implementation assumes that in most cases
            there are 3 or less completion callbacks and 1 or less progress callbacks. A <see cref="T:System.Threading.SynchronizationContext"/>
            instance is stored for each callback.
            </summary>
        </member>
        <member name="T:UnityFx.Async.SingleContextCallbackCollection">
            <summary>
            A single-threaded implementation of <see cref="T:UnityFx.Async.IAsyncCallbackCollection"/>. The implementation assumes that in most cases
            there are 3 or less completion callbacks and 1 or less progress callbacks. A shared <see cref="T:System.Threading.SynchronizationContext"/>
            instance is used for all callbacks.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Indicates the type of the async method builder that should be used by a language compiler to
            build the attributed type when used as the return type of an async method.
            </summary>
            <seealso href="https://blogs.msdn.microsoft.com/seteplia/2018/01/11/extending-the-async-methods-in-c/"/>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the associated builder.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute"/> class.
            </summary>
        </member>
    </members>
</doc>
