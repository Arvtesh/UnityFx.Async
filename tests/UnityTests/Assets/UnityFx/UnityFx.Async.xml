<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnityFx.Async</name>
    </assembly>
    <members>
        <member name="T:UnityFx.Async.IAsyncAwaiter">
            <summary>
            An generic awaiter.
            </summary>
        </member>
        <member name="P:UnityFx.Async.IAsyncAwaiter.IsCompleted">
            <summary>
            Returns <c>true</c> if the source awaitable is completed; <c>false</c> otherwise. Read only.
            </summary>
        </member>
        <member name="M:UnityFx.Async.IAsyncAwaiter.GetResult">
            <summary>
            Returns the source result value.
            </summary>
        </member>
        <member name="T:UnityFx.Async.IAsyncAwaiter`1">
            <summary>
            An generic awaiter.
            </summary>
            <seealso cref="T:UnityFx.Async.IAsyncAwaiter"/>
        </member>
        <member name="P:UnityFx.Async.IAsyncAwaiter`1.IsCompleted">
            <summary>
            Returns <c>true</c> if the source awaitable is completed; <c>false</c> otherwise. Read only.
            </summary>
        </member>
        <member name="M:UnityFx.Async.IAsyncAwaiter`1.GetResult">
            <summary>
            Returns the source result value.
            </summary>
        </member>
        <member name="T:UnityFx.Async.IAsyncCompletionSource">
            <summary>
            Controls completion of a <see cref="T:UnityFx.Async.IAsyncOperation"/> instance.
            </summary>
            <seealso cref="T:UnityFx.Async.IAsyncOperation"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncCompletionSource.SetCanceled(System.Boolean)">
            <summary>
            Transitions the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Canceled"/> state.
            </summary>
            <param name="completedSynchronously">A synchronous completion flag. Set to <see langword="false"/> if not sure.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource.TrySetCanceled(System.Boolean)"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncCompletionSource.TrySetCanceled(System.Boolean)">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Canceled"/> state.
            </summary>
            <param name="completedSynchronously">A synchronous completion flag. Set to <see langword="false"/> if not sure.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource.SetCanceled(System.Boolean)"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncCompletionSource.SetException(System.Exception,System.Boolean)">
            <summary>
            Transitions the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> state.
            </summary>
            <param name="e">An exception that caused the operation to end prematurely.</param>
            <param name="completedSynchronously">A synchronous completion flag. Set to <see langword="false"/> if not sure.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource.TrySetException(System.Exception,System.Boolean)"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncCompletionSource.TrySetException(System.Exception,System.Boolean)">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> state.
            </summary>
            <param name="e">An exception that caused the operation to end prematurely.</param>
            <param name="completedSynchronously">A synchronous completion flag. Set to <see langword="false"/> if not sure.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource.SetException(System.Exception,System.Boolean)"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncCompletionSource.SetCompleted(System.Boolean)">
            <summary>
            Transitions the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> state.
            </summary>
            <param name="completedSynchronously">A synchronous completion flag. Set to <see langword="false"/> if not sure.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource.TrySetCompleted(System.Boolean)"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncCompletionSource.TrySetCompleted(System.Boolean)">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> state.
            </summary>
            <param name="completedSynchronously">A synchronous completion flag. Set to <see langword="false"/> if not sure.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource.SetCompleted(System.Boolean)"/>
        </member>
        <member name="T:UnityFx.Async.IAsyncCompletionSource`1">
            <summary>
            Controls completion of a <see cref="T:UnityFx.Async.IAsyncOperation`1"/> instance.
            </summary>
            <seealso cref="T:UnityFx.Async.IAsyncOperation`1"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncCompletionSource`1.SetResult(`0,System.Boolean)">
            <summary>
            Transitions the underlying <see cref="T:UnityFx.Async.IAsyncOperation`1"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> state.
            </summary>
            <param name="result">The operation result.</param>
            <param name="completedSynchronously">A synchronous completion flag. Set to <see langword="false"/> if not sure.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource`1.TrySetResult(`0,System.Boolean)"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncCompletionSource`1.TrySetResult(`0,System.Boolean)">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation`1"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> state.
            </summary>
            <param name="result">The operation result.</param>
            <param name="completedSynchronously">A synchronous completion flag. Set to <see langword="false"/> if not sure.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation is disposed.</exception>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.IAsyncCompletionSource`1.SetResult(`0,System.Boolean)"/>
        </member>
        <member name="T:UnityFx.Async.AsyncOperationStatus">
            <summary>
            Enumerates possible status values for <see cref="T:UnityFx.Async.IAsyncOperation"/>.
            </summary>
            <seealso cref="T:UnityFx.Async.IAsyncOperation"/>
        </member>
        <member name="F:UnityFx.Async.AsyncOperationStatus.Created">
            <summary>
            The operation is initialized but has not yet been scheduled for execution.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncOperationStatus.Scheduled">
            <summary>
            The operation has been scheduled for execution but has not yet begun executing.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncOperationStatus.Running">
            <summary>
            The operation is running but has not yet completed.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion">
            <summary>
            The operation completed execution successfully.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncOperationStatus.Canceled">
            <summary>
            The operation has been canceled.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncOperationStatus.Faulted">
            <summary>
            The operation completed due to an unhandled exception.
            </summary>
        </member>
        <member name="T:UnityFx.Async.IAsyncOperation">
            <summary>
            A disposable <see cref="T:System.IAsyncResult"/> with status information.
            </summary>
            <remarks>
            The interface is designed to be as close to the TLP Task as possible. All interface methods are expected to be thread-safe.
            The only exception to this rule is <see cref="M:System.IDisposable.Dispose"/>.
            </remarks>
            <seealso cref="T:System.IAsyncResult"/>
            <seealso cref="T:UnityFx.Async.IAsyncOperation`1"/>
        </member>
        <member name="P:UnityFx.Async.IAsyncOperation.Status">
            <summary>
            Returns the operation status identifier. Read only.
            </summary>
            <value>The operation status identifier.</value>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.IsCompletedSuccessfully"/>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.IsFaulted"/>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.IsCanceled"/>
        </member>
        <member name="P:UnityFx.Async.IAsyncOperation.Exception">
            <summary>
            Returns an <see cref="T:System.Exception"/> that caused the operation to end prematurely. If the operation completed successfully
            or has not yet thrown any exceptions, this will return <see langword="null"/>. Read only.
            </summary>
            <value>An exception that caused the operation to end prematurely.</value>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.IsFaulted"/>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.Status"/>
        </member>
        <member name="P:UnityFx.Async.IAsyncOperation.IsCompletedSuccessfully">
            <summary>
            Returns <see langword="true"/> if the operation has completed successfully, <see langword="false"/> otherwise. Read only.
            </summary>
            <value>A value indicating whether the operation has finished successfully.</value>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.IsFaulted"/>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.IsCanceled"/>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.Status"/>
        </member>
        <member name="P:UnityFx.Async.IAsyncOperation.IsFaulted">
            <summary>
            Returns <see langword="true"/> if the operation has failed for any reason, <see langword="false"/> otherwise. Read only.
            </summary>
            <value>A value indicating whether the operation has failed.</value>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.Exception"/>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.IsCompletedSuccessfully"/>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.IsCanceled"/>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.Status"/>
        </member>
        <member name="P:UnityFx.Async.IAsyncOperation.IsCanceled">
            <summary>
            Returns <see langword="true"/> if the operation has been canceled by user, <see langword="false"/> otherwise. Read only.
            </summary>
            <value>A value indicating whether the operation has been canceled by user.</value>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.IsCompletedSuccessfully"/>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.IsFaulted"/>
            <seealso cref="P:UnityFx.Async.IAsyncOperation.Status"/>
        </member>
        <member name="T:UnityFx.Async.IAsyncOperationEvents">
            <summary>
            A controller for <see cref="T:UnityFx.Async.IAsyncOperation"/> completion callbacks.
            </summary>
            <seealso cref="T:UnityFx.Async.IAsyncOperation"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncOperationEvents.AddCompletionCallback(System.Action)">
            <summary>
            Adds a completion callback to be executed after the operation has finished. If the operation is already
            in completed state just invokes the <paramref name="action"/>.
            </summary>
            <param name="action">The callback to be executed when the operation has finished.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation has been disposed.</exception>
            <seealso cref="M:UnityFx.Async.IAsyncOperationEvents.RemoveCompletionCallback(System.Action)"/>
        </member>
        <member name="M:UnityFx.Async.IAsyncOperationEvents.RemoveCompletionCallback(System.Action)">
            <summary>
            Removes existing completion callback.
            </summary>
            <param name="action">The callback to remove.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown is the operation has been disposed.</exception>
            <seealso cref="M:UnityFx.Async.IAsyncOperationEvents.AddCompletionCallback(System.Action)"/>
        </member>
        <member name="T:UnityFx.Async.IAsyncOperation`1">
            <summary>
            Extends an <see cref="T:UnityFx.Async.IAsyncOperation"/> interface with a result value.
            </summary>
            <seealso cref="T:System.IAsyncResult"/>
            <seealso cref="T:UnityFx.Async.IAsyncOperation"/>
        </member>
        <member name="P:UnityFx.Async.IAsyncOperation`1.Result">
            <summary>
            Returns the result value of this operation. Read only.
            </summary>
            <remarks>
            Once the result of an operation is available, it is stored and is returned immediately on subsequent calls to the <see cref="P:UnityFx.Async.IAsyncOperation`1.Result"/> property.
            Note that, if an exception occurred during the operation, or if the operation has been cancelled, the <see cref="P:UnityFx.Async.IAsyncOperation`1.Result"/> property does not return a value.
            Instead, attempting to access the property value throws an <see cref="T:System.InvalidOperationException"/> exception.
            </remarks>
            <value>Result of the operation.</value>
            <exception cref="T:System.InvalidOperationException">Thrown either if the property is accessed before operation is completed or if the operation has faulted.</exception>
        </member>
        <member name="T:UnityFx.Async.AsyncContinuationOptions">
            <summary>
            Specifies the behavior for continuation operations.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncContinuationOptions.None">
            <summary>
            No options. Default continuation behaviour.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncContinuationOptions.OnlyOnRanToCompletion">
            <summary>
            Specifies that the continuation should be scheduled only if its antecedent has completed successfully.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncContinuationOptions.OnlyOnFaulted">
            <summary>
            Specifies that the continuation task should be scheduled only if its antecedent has completed with an error.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncContinuationOptions.OnlyOnCanceled">
            <summary>
            Specifies that the continuation task should be scheduled only if its antecedent has been canceled.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncContinuationOptions.NotOnRanToCompletion">
            <summary>
            Specifies that the continuation should be scheduled only if its antecedent has not completed successfully.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncContinuationOptions.NotOnFaulted">
            <summary>
            Specifies that the continuation should be scheduled only if its antecedent has not completed with an error.
            </summary>
        </member>
        <member name="F:UnityFx.Async.AsyncContinuationOptions.NotOnCanceled">
            <summary>
            Specifies that the continuation should be scheduled only if its antecedent has not been canceled.
            </summary>
        </member>
        <member name="T:UnityFx.Async.AsyncExtensions">
            <summary>
            Extension methods for <see cref="T:UnityFx.Async.IAsyncOperation"/> related classes.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Wait(UnityFx.Async.IAsyncOperation)">
            <summary>
            Blocks calling thread until the operation is completed.
            </summary>
            <param name="op">The operation to wait for.</param>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation)">
            <summary>
            Blocks calling thread until the operation is completed. After that rethrows the operation exception (if any).
            </summary>
            <param name="op">The operation to join.</param>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0})"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Wait(UnityFx.Async.IAsyncOperation)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.Join``1(UnityFx.Async.IAsyncOperation{``0})">
            <summary>
            Blocks calling thread until the operation is completed. After that rethrows the operation exception (if any).
            </summary>
            <param name="op">The operation to join.</param>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Join(UnityFx.Async.IAsyncOperation)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.Wait(UnityFx.Async.IAsyncOperation)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ThrowIfFaulted(UnityFx.Async.IAsyncOperation)">
            <summary>
            Throws exception if the operation has failed.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(``0,System.Action{``0,UnityFx.Async.IAsyncCompletionSource})">
            <summary>
            Creates a continuation that executes when the target <see cref="T:UnityFx.Async.IAsyncOperation"/> completes.
            </summary>
            <remarks>
            The <paramref name="action"/> is expected to start another asynchronous operation. When the operation is completed it
            should use the second <paramref name="action"/> argument to complete the continuation. If the <paramref name="op"/>
            is already completed the <paramref name="action"/> is being called synchronously.
            </remarks>
            <typeparam name="T">Type of the operation to continue.</typeparam>
            <param name="op">The operation to continue.</param>
            <param name="action">An action to run when the <paramref name="op"/> completes.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An operation that is executed after <paramref name="op"/> completes.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(``0,System.Action{``0,UnityFx.Async.IAsyncCompletionSource,System.Object},System.Object)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``2(``0,System.Action{``0,UnityFx.Async.IAsyncCompletionSource{``1}})"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.TransformWith``2(``0,System.Func{``0,``1})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(``0,System.Action{``0,UnityFx.Async.IAsyncCompletionSource,System.Object},System.Object)">
            <summary>
            Creates a continuation that executes when the target <see cref="T:UnityFx.Async.IAsyncOperation"/> completes.
            </summary>
            <remarks>
            The <paramref name="action"/> is expected to start another asynchronous operation. When the operation is completed it
            should use the second <paramref name="action"/> argument to complete the continuation. If the <paramref name="op"/>
            is already completed the <paramref name="action"/> is being called synchronously.
            </remarks>
            <typeparam name="T">Type of the operation to continue.</typeparam>
            <param name="op">The operation to continue.</param>
            <param name="action">An action to run when the <paramref name="op"/> completes.</param>
            <param name="state">User-defined state that is passed as last argument of <paramref name="action"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An operation that is executed after <paramref name="op"/> completes.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(``0,System.Action{``0,UnityFx.Async.IAsyncCompletionSource})"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``2(``0,System.Action{``0,UnityFx.Async.IAsyncCompletionSource{``1}})"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.TransformWith``2(``0,System.Func{``0,``1})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ContinueWith``2(``0,System.Action{``0,UnityFx.Async.IAsyncCompletionSource{``1}})">
            <summary>
            Creates a continuation that executes when the target <see cref="T:UnityFx.Async.IAsyncOperation"/> completes.
            </summary>
            <remarks>
            The <paramref name="action"/> is expected to start another asynchronous operation. When the operation is completed it
            should use the second <paramref name="action"/> argument to complete the continuation. If the <paramref name="op"/>
            is already completed the <paramref name="action"/> is being called synchronously.
            </remarks>
            <typeparam name="T">Type of the operation to continue.</typeparam>
            <typeparam name="U">Result type of the continuation operation.</typeparam>
            <param name="op">The operation to continue.</param>
            <param name="action">An action to run when the <paramref name="op"/> completes.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <returns>An operation that is executed after <paramref name="op"/> completes.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``2(``0,System.Action{``0,UnityFx.Async.IAsyncCompletionSource{``1},System.Object},System.Object)"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(``0,System.Action{``0,UnityFx.Async.IAsyncCompletionSource})"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.TransformWith``2(``0,System.Func{``0,``1})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ContinueWith``2(``0,System.Action{``0,UnityFx.Async.IAsyncCompletionSource{``1},System.Object},System.Object)">
            <summary>
            Creates a continuation that executes when the target <see cref="T:UnityFx.Async.IAsyncOperation"/> completes.
            </summary>
            <remarks>
            The <paramref name="action"/> is expected to start another asynchronous operation. When the operation is completed it
            should use the second <paramref name="action"/> argument to complete the continuation. If the <paramref name="op"/>
            is already completed the <paramref name="action"/> is being called synchronously.
            </remarks>
            <typeparam name="T">Type of the operation to continue.</typeparam>
            <typeparam name="U">Result type of the continuation operation.</typeparam>
            <param name="op">The operation to continue.</param>
            <param name="action">An action to run when the <paramref name="op"/> completes.</param>
            <param name="state">User-defined state that is passed as last argument of <paramref name="action"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the target <see cref="T:UnityFx.Async.IAsyncOperation"/> does not implement <see cref="T:UnityFx.Async.IAsyncOperationEvents"/>.</exception>
            <returns>An operation that is executed after <paramref name="op"/> completes.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``2(``0,System.Action{``0,UnityFx.Async.IAsyncCompletionSource{``1}})"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(``0,System.Action{``0,UnityFx.Async.IAsyncCompletionSource})"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.TransformWith``2(``0,System.Func{``0,``1})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.TransformWith``2(``0,System.Func{``0,``1})">
            <summary>
            Creates a continuation that transforms the target <see cref="T:UnityFx.Async.IAsyncOperation"/> result.
            </summary>
            <typeparam name="T">Type of the operation to continue.</typeparam>
            <typeparam name="U">Result type of the continuation operation.</typeparam>
            <param name="op">The operation which result is to be transformed.</param>
            <param name="resultTransformer">A function used for the <paramref name="op"/> result transformation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="resultTransformer"/> is <see langword="null"/>.</exception>
            <returns>An operation with the transformed result vlaue.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``1(``0,System.Action{``0,UnityFx.Async.IAsyncCompletionSource})"/>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.ContinueWith``2(``0,System.Action{``0,UnityFx.Async.IAsyncCompletionSource{``1}})"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.GetAwaiter(UnityFx.Async.IAsyncOperation)">
            <summary>
            Returns the operation awaiter. This method is intended for compiler rather than use directly in code.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.GetAwaiter``1(UnityFx.Async.IAsyncOperation{``0})">
            <summary>
            Returns the operation awaiter. This method is intended for compiler rather than use directly in code.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ToTask(UnityFx.Async.IAsyncOperation)">
            <summary>
            Created a <see cref="T:System.Threading.Tasks.Task"/> instance matching the source <see cref="T:UnityFx.Async.IAsyncOperation"/>.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.ToTask``1(UnityFx.Async.IAsyncOperation{``0})">
            <summary>
            Created a <see cref="T:System.Threading.Tasks.Task"/> instance matching the source <see cref="T:UnityFx.Async.IAsyncOperation"/>.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.SetCanceled(UnityFx.Async.IAsyncCompletionSource)">
            <summary>
            Transitions the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Canceled"/> state.
            </summary>
            <param name="acs">The copmletion source instance.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.TrySetCanceled(UnityFx.Async.IAsyncCompletionSource)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.TrySetCanceled(UnityFx.Async.IAsyncCompletionSource)">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Canceled"/> state.
            </summary>
            <param name="acs">The copmletion source instance.</param>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetCanceled(UnityFx.Async.IAsyncCompletionSource)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.SetException(UnityFx.Async.IAsyncCompletionSource,System.Exception)">
            <summary>
            Transitions the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> state.
            </summary>
            <param name="acs">The copmletion source instance.</param>
            <param name="e">An exception that caused the operation to end prematurely.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.TrySetException(UnityFx.Async.IAsyncCompletionSource,System.Exception)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.TrySetException(UnityFx.Async.IAsyncCompletionSource,System.Exception)">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.Faulted"/> state.
            </summary>
            <param name="acs">The copmletion source instance.</param>
            <param name="e">An exception that caused the operation to end prematurely.</param>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetException(UnityFx.Async.IAsyncCompletionSource,System.Exception)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.SetCompleted(UnityFx.Async.IAsyncCompletionSource)">
            <summary>
            Transitions the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> state.
            </summary>
            <param name="acs">The copmletion source instance.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.TrySetCompleted(UnityFx.Async.IAsyncCompletionSource)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.TrySetCompleted(UnityFx.Async.IAsyncCompletionSource)">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> state.
            </summary>
            <param name="acs">The copmletion source instance.</param>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetCompleted(UnityFx.Async.IAsyncCompletionSource)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.SetResult``1(UnityFx.Async.IAsyncCompletionSource{``0},``0)">
            <summary>
            Transitions the underlying <see cref="T:UnityFx.Async.IAsyncOperation`1"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> state.
            </summary>
            <param name="acs">The copmletion source instance.</param>
            <param name="result">The operation result.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.TrySetResult``1(UnityFx.Async.IAsyncCompletionSource{``0},``0)"/>
        </member>
        <member name="M:UnityFx.Async.AsyncExtensions.TrySetResult``1(UnityFx.Async.IAsyncCompletionSource{``0},``0)">
            <summary>
            Attempts to transition the underlying <see cref="T:UnityFx.Async.IAsyncOperation`1"/> into the <see cref="F:UnityFx.Async.AsyncOperationStatus.RanToCompletion"/> state.
            </summary>
            <param name="acs">The copmletion source instance.</param>
            <param name="result">The operation result.</param>
            <returns>Returns <see langword="true"/> if the attemp was successfull; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:UnityFx.Async.AsyncExtensions.SetResult``1(UnityFx.Async.IAsyncCompletionSource{``0},``0)"/>
        </member>
        <member name="T:UnityFx.Async.AsyncResult">
            <summary>
            Implementation of <see cref="T:UnityFx.Async.IAsyncOperation"/>.
            </summary>
            <seealso href="https://blogs.msdn.microsoft.com/nikos/2011/03/14/how-to-implement-the-iasyncresult-design-pattern/"/>
            <seealso cref="T:System.IAsyncResult"/>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.IsDisposed">
            <summary>
            Returns <see langword="true"/> if the operation is disposed; <see langword="false"/> otherwise. Read only.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult"/> class.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult"/> class.
            </summary>
            <param name="asyncCallback">User-defined completion callback.</param>
            <param name="asyncState">User-defined data returned by <see cref="P:UnityFx.Async.AsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult"/> class.
            </summary>
            <param name="setRunning">If set to <see langword="true"/> transitions the operation to <see cref="F:UnityFx.Async.AsyncOperationStatus.Running"/> status; otherwise the status is set to <see cref="F:UnityFx.Async.AsyncOperationStatus.Scheduled"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.SetScheduled">
            <summary>
            Transitions the operation to <see cref="F:UnityFx.Async.AsyncOperationStatus.Scheduled"/> state.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <seealso cref="M:UnityFx.Async.AsyncResult.SetRunning"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.SetRunning">
            <summary>
            Transitions the operation to <see cref="F:UnityFx.Async.AsyncOperationStatus.Running"/> state.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the transition fails.</exception>
            <seealso cref="M:UnityFx.Async.AsyncResult.SetScheduled"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.ThrowIfDisposed">
            <summary>
            Throws <see cref="T:System.ObjectDisposedException"/> if this operation has been disposed.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.OnStatusChanged">
            <summary>
            Called when the operation state has changed.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.OnCompleted">
            <summary>
            Called when the operation is completed.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged resources used by the object.
            </summary>
            <param name="disposing">Should be <see langword="true"/> if the method is called from <see cref="M:UnityFx.Async.AsyncResult.Dispose"/>; <see langword="false"/> otherwise.</param>
            <seealso cref="M:UnityFx.Async.AsyncResult.Dispose"/>
            <seealso cref="M:UnityFx.Async.AsyncResult.ThrowIfDisposed"/>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.Completed">
            <summary>
            Returns an operation that's already been completed successfully.
            </summary>
            <remarks>
            May not always return the same instance.
            </remarks>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromException(System.Exception)">
            <summary>
            Creates a <see cref="T:UnityFx.Async.IAsyncOperation"/> that has completed with a specified exception.
            </summary>
            <param name="e">The exception with which to complete the operation.</param>
            <returns>The faulted operation.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromException``1(System.Exception)">
            <summary>
            Creates a <see cref="T:UnityFx.Async.IAsyncOperation`1"/> that has completed with a specified exception.
            </summary>
            <param name="e">The exception with which to complete the operation.</param>
            <returns>The faulted operation.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.FromResult``1(``0)">
            <summary>
            Creates a <see cref="T:UnityFx.Async.IAsyncOperation`1"/> that has completed with a specified result.
            </summary>
            <param name="result">The result value with which to complete the operation.</param>
            <returns>The completed operation.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Delay(System.Int32)">
            <summary>
            Creates an operation that completes after a time delay.
            </summary>
            <param name="millisecondsDelay">The number of milliseconds to wait before completing the returned operation, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="millisecondsDelay"/> is less than -1.</exception>
            <returns>An operation that represents the time delay.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Delay(System.TimeSpan)">
            <summary>
            Creates a task that completes after a specified time interval.
            </summary>
            <param name="delay">The time span to wait before completing the returned task, or <c>TimeSpan.FromMilliseconds(-1)</c> to wait indefinitely.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="delay"/> represents a negative time interval other than <c>TimeSpan.FromMillseconds(-1)</c>.</exception>
            <returns>An operation that represents the time delay.</returns>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TryCreateAsyncWaitHandle(System.Threading.EventWaitHandle@,System.IAsyncResult)">
            <summary>
            tt
            </summary>
            <param name="waitHandle"></param>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.SetCanceled(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TrySetCanceled(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.SetException(System.Exception,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TrySetException(System.Exception,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.SetCompleted(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.TrySetCompleted(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.Status">
            <inheritdoc/>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.Exception">
            <inheritdoc/>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.IsCompletedSuccessfully">
            <inheritdoc/>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.IsFaulted">
            <inheritdoc/>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.IsCanceled">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.AddCompletionCallback(System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.RemoveCompletionCallback(System.Action)">
            <inheritdoc/>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.AsyncWaitHandle">
            <inheritdoc/>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.AsyncState">
            <inheritdoc/>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.CompletedSynchronously">
            <inheritdoc/>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.IsCompleted">
            <inheritdoc/>
        </member>
        <member name="P:UnityFx.Async.AsyncResult.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.System#Collections#IEnumerator#MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.System#Collections#IEnumerator#Reset">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult.ToString">
            <inheritdoc/>
        </member>
        <member name="T:UnityFx.Async.AsyncResultAwaiter">
            <summary>
            Provides an object that waits for the completion of an asynchronous operation. This type and its members are intended for compiler use only.
            </summary>
            <seealso cref="T:UnityFx.Async.AsyncResult"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResultAwaiter.#ctor(System.IAsyncResult)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResultAwaiter"/> struct.
            </summary>
        </member>
        <member name="P:UnityFx.Async.AsyncResultAwaiter.IsCompleted">
            <summary>
            Returns <c>true</c> if the source awaitable is completed; <c>false</c> otherwise. Read only.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResultAwaiter.GetResult">
            <summary>
            Returns the source result value.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResultAwaiter.OnCompleted(System.Action)">
            <summary>
            Schedules the continuation action that's invoked when the operation completes.
            </summary>
        </member>
        <member name="T:UnityFx.Async.AsyncResultAwaiter`1">
            <summary>
            Provides an object that waits for the completion of an asynchronous operation. This type and its members are intended for compiler use only.
            </summary>
            <seealso cref="T:UnityFx.Async.AsyncResult`1"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResultAwaiter`1.#ctor(UnityFx.Async.IAsyncOperation{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResultAwaiter`1"/> struct.
            </summary>
        </member>
        <member name="P:UnityFx.Async.AsyncResultAwaiter`1.IsCompleted">
            <summary>
            Returns <c>true</c> if the source awaitable is completed; <c>false</c> otherwise. Read only.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResultAwaiter`1.GetResult">
            <summary>
            Returns the source result value.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResultAwaiter`1.OnCompleted(System.Action)">
            <summary>
            Schedules the continuation action that's invoked when the operation completes.
            </summary>
        </member>
        <member name="T:UnityFx.Async.AsyncResult`1">
            <summary>
            Implementation of <see cref="T:UnityFx.Async.IAsyncOperation`1"/>.
            </summary>
            <typeparam name="T">Type of the operation result.</typeparam>
            <seealso cref="T:System.IAsyncResult"/>
            <seealso cref="T:UnityFx.Async.IAsyncOperation"/>
            <seealso cref="T:UnityFx.Async.AsyncResult"/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult`1"/> class.
            </summary>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult`1"/> class.
            </summary>
            <param name="asyncCallback">User-defined completion callback.</param>
            <param name="asyncState">User-defined data to assosiate with the operation.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityFx.Async.AsyncResult`1"/> class.
            </summary>
            <param name="setRunning">If set to <see langword="true"/> transitions the operation to <see cref="F:UnityFx.Async.AsyncOperationStatus.Running"/> status; otherwise the status is set to <see cref="F:UnityFx.Async.AsyncOperationStatus.Scheduled"/>.</param>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.SetResult(`0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UnityFx.Async.AsyncResult`1.TrySetResult(`0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:UnityFx.Async.AsyncResult`1.Result">
            <inheritdoc/>
        </member>
        <member name="T:UnityFx.Async.DelayAsyncResult">
            <summary>
            Helper class used in <see cref="M:UnityFx.Async.AsyncResult.Delay(System.Int32)"/> implementation.
            </summary>
        </member>
    </members>
</doc>
